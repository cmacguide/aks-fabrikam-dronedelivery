#!/bin/bash
# Generated by Copilot
# Simplified post-provisioning hook for debugging

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

echo "🚀 Starting simplified post-provisioning setup..."

# Get basic outputs
log_info "Getting deployment outputs..."
COMPUTE_RG=$(azd env get-values | grep "AZURE_RESOURCE_GROUP" | cut -d'=' -f2 | tr -d '"')
SECURITY_RG=$(echo "$COMPUTE_RG" | sed 's/compute/security/')
AKS_CLUSTER_NAME=$(azd env get-values | grep "aksClusterName" | cut -d'=' -f2 | tr -d '"')
KEY_VAULT_NAME=$(azd env get-values | grep "keyVaultName" | cut -d'=' -f2 | tr -d '"')

log_success "Resources: AKS=$AKS_CLUSTER_NAME, KV=$KEY_VAULT_NAME"

# Test kubectl
log_info "Testing kubectl access..."
if kubectl get namespaces >/dev/null 2>&1; then
  log_success "kubectl is working correctly"
  kubectl get nodes
else
  log_warning "kubectl needs configuration"
  az aks get-credentials --resource-group "$COMPUTE_RG" --name "$AKS_CLUSTER_NAME" --admin --overwrite-existing
fi

# Test Key Vault access
log_info "Testing Key Vault access..."

# First, let's verify the Key Vault exists
log_info "Verifying Key Vault exists: $KEY_VAULT_NAME"
if az keyvault show --name "$KEY_VAULT_NAME" --output none 2>/dev/null; then
  log_success "Key Vault exists"
else
  log_error "Key Vault $KEY_VAULT_NAME not found"
  exit 1
fi

# Check current permissions
log_info "Checking current Key Vault permissions..."
current_user_oid=$(az ad signed-in-user show --query id --output tsv 2>/dev/null || echo "")
log_info "Current user Object ID: $current_user_oid"

# Check current role assignments and Key Vault configuration
check_current_roles

# Check if we can list certificates
if az keyvault certificate list --vault-name "$KEY_VAULT_NAME" --output table 2>/dev/null; then
  log_success "Key Vault certificate access is working"
  KV_ACCESS=true
else
  log_warning "Key Vault certificate access needs configuration"
  KV_ACCESS=false

  if [ -n "$current_user_oid" ]; then
    log_info "Configuring Key Vault permissions for user: $current_user_oid"

    # Get Key Vault resource ID
    kv_resource_id="/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$SECURITY_RG/providers/Microsoft.KeyVault/vaults/$KEY_VAULT_NAME"
    log_info "Key Vault Resource ID: $kv_resource_id"

    # Try multiple roles
    roles=("Key Vault Certificate Officer" "Key Vault Secrets Officer" "Key Vault Administrator")

    for role in "${roles[@]}"; do
      log_info "Assigning role: $role"
      if az role assignment create \
        --assignee "$current_user_oid" \
        --role "$role" \
        --scope "$kv_resource_id" \
        --output none 2>/dev/null; then
        log_success "Successfully assigned $role"
      else
        log_warning "Failed to assign $role (may already exist)"
      fi
    done

    log_info "Waiting 90 seconds for RBAC propagation..."
    sleep 90

    # Test again
    if az keyvault certificate list --vault-name "$KEY_VAULT_NAME" --output none 2>/dev/null; then
      log_success "Key Vault access now working"
      KV_ACCESS=true
    else
      log_warning "Key Vault access still not working - checking specific error..."
      # Try to get specific error
      az keyvault certificate list --vault-name "$KEY_VAULT_NAME" 2>&1 | head -5
    fi
  else
    log_error "Could not get current user Object ID"
  fi
fi

# Generated by Copilot - Function to check current role assignments
check_current_roles() {
  log_info "Checking current role assignments for Key Vault..."

  if [ -n "$current_user_oid" ]; then
    log_info "Role assignments for user $current_user_oid on Key Vault $KEY_VAULT_NAME:"

    # Get Key Vault resource ID
    local kv_resource_id="/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$SECURITY_RG/providers/Microsoft.KeyVault/vaults/$KEY_VAULT_NAME"

    # Check role assignments
    az role assignment list \
      --assignee "$current_user_oid" \
      --scope "$kv_resource_id" \
      --query "[].{Role:roleDefinitionName,Scope:scope}" \
      --output table 2>/dev/null || log_warning "Could not retrieve role assignments"

    # Also check if Key Vault is using RBAC or Access Policies
    local auth_mode=$(az keyvault show --name "$KEY_VAULT_NAME" --query "properties.enableRbacAuthorization" --output tsv)
    log_info "Key Vault RBAC Authorization enabled: $auth_mode"

    if [ "$auth_mode" != "true" ]; then
      log_warning "Key Vault is using Access Policies, not RBAC!"
      log_info "Consider updating to RBAC mode or configure access policies"
    fi
  fi
}

# Check current roles and Key Vault configuration
check_current_roles

# Generate a simple certificate only if Key Vault is accessible
if [ "$KV_ACCESS" = true ]; then
  log_info "Attempting to generate a test certificate..."
  CERT_DIR="/tmp/test-cert"
  mkdir -p "$CERT_DIR"

  openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -out "$CERT_DIR/test.crt" \
    -keyout "$CERT_DIR/test.key" \
    -subj "/CN=test.fabrikam.com/O=Fabrikam"

  openssl pkcs12 -export -out "$CERT_DIR/test.pfx" \
    -inkey "$CERT_DIR/test.key" \
    -in "$CERT_DIR/test.crt" \
    -passout pass:

  if az keyvault certificate import \
    --vault-name "$KEY_VAULT_NAME" \
    --name "test-certificate" \
    --file "$CERT_DIR/test.pfx" \
    --output none 2>/dev/null; then
    log_success "Certificate import successful!"

    # List certificates to verify
    log_info "Current certificates in Key Vault:"
    az keyvault certificate list --vault-name "$KEY_VAULT_NAME" --query "[].name" --output table
  else
    log_error "Certificate import failed - getting detailed error..."
    az keyvault certificate import \
      --vault-name "$KEY_VAULT_NAME" \
      --name "test-certificate" \
      --file "$CERT_DIR/test.pfx" 2>&1 | head -10
  fi

  # Cleanup
  rm -rf "$CERT_DIR"
else
  log_warning "Skipping certificate generation - Key Vault access not available"
  log_info "Manual steps needed:"
  log_info "1. Ensure user $current_user_oid has Key Vault Certificate Officer role"
  log_info "2. Wait 5-10 minutes for RBAC propagation"
  log_info "3. Re-run the post-provisioning script"
fi

log_success "Simplified post-provisioning completed!"
