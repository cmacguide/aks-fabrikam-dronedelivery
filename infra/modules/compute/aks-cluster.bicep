// Generated by Copilot
// AKS Cluster module for Fabrikam Drone Delivery
// This module creates an AKS cluster with enterprise-grade security, monitoring, and compliance

// ============================================================================
// PARAMETERS
// ============================================================================

@description('Azure region for resource deployment')
param location string
@description('Resource prefix identifier for resource naming')
param resourceSufix string
@description('Kubernetes version for the AKS cluster')
param kubernetesVersion string
@description('Object ID of the Azure AD group with admin access to AKS')
param k8sRbacEntraAdminGroupObjectID string
@description('Tenant ID for Azure AD integration')
param k8sRbacEntraProfileTenantId string
@description('Node Count for AKS Node System')
param aksSystemNodeCount int
@description('Node Count for AKS Node User')
param aksUserNodeCount int
@description('Node Size for AKS')
param aksNodeSize string
@description('Min Node Count for AKS')
param aksMinCount int
@description('Max Node Count for AKS')
param aksMaxCount int
@description('Service CIDR AKS')
param aksServiceCidr string
@description('DNS Service Ip AKS')
param aksDnsServiceIP string
@description('Load Balancer SKU AKS')
param aksLoadBalancerSku string
@description('Load Balancer SKU AKS')
param aksEnableAutoScaling bool
@description('Resource ID of the Virtual Network where AKS will be deployed')
param vnetResourceId string
@description('Resource ID of the subnet for AKS node pools')
param subnetResourceId string
@description('Resource ID of the Azure Container Registry')
param containerRegistryId string
@description('Resource ID of the Key Vault for secrets')
param keyVaultId string
@description('Resource ID of the Log Analytics Workspace for monitoring')
param logAnalyticsWorkspaceId string
@description('IP ranges authorized to contact the Kubernetes API server')
param clusterAuthorizedIPRanges array = []
@description('URL of the GitOps repository for cluster bootstrapping')
param gitOpsBootstrappingRepoHttpsUrl string = 'https://github.com/mspnp/aks-fabrikam-dronedelivery.git'
@description('Branch of the GitOps repository')
param gitOpsBootstrappingRepoBranch string = 'main'
@description('Tags to be applied to all resources')
param tags object = {}

// ============================================================================
// VARIABLES
// ============================================================================

var clusterName = 'aks-${resourceSufix}'
var nodeResourceGroupName = 'MC_${resourceGroup().name}_${clusterName}_${location}'
// RBAC role definitions
var keyVaultSecretsUserRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  '4633458b-17de-408a-b874-0445c86b69e6'
)
var keyVaultCertificateUserRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba'
)
var monitoringMetricsPublisherRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  '3913510d-42f4-4e42-8a64-420c390055eb'
)
var managedIdentityOperatorRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  'f1a07417-d97a-45cb-824c-7a7467783830'
)
var acrPullRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  '7f951dda-4ed3-4680-a7ca-43fe172d538d'
)
// Extract VNet resource group and names from resource IDs
var vnetResourceGroup = split(vnetResourceId, '/')[4]
// Container registry name extraction
var containerRegistryName = last(split(containerRegistryId, '/'))
// Log Analytics Workspace name extraction
var logAnalyticsWorkspaceName = last(split(logAnalyticsWorkspaceId, '/'))
var containerInsightsSolutionName = 'ContainerInsights(${logAnalyticsWorkspaceName})'

// ============================================================================
// MONITORING SOLUTIONS
// ============================================================================

// Container Insights solution for monitoring
resource containerInsightsSolution 'Microsoft.OperationsManagement/solutions@2015-11-01-preview' = {
  name: containerInsightsSolutionName
  location: location
  tags: tags
  properties: {
    workspaceResourceId: logAnalyticsWorkspaceId
  }
  plan: {
    name: containerInsightsSolutionName
    product: 'OMSGallery/ContainerInsights'
    promotionCode: ''
    publisher: 'Microsoft'
  }
}

// ============================================================================
// MANAGED IDENTITIES
// ============================================================================

// Cluster control plane identity
resource clusterControlPlaneIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: 'mi-${clusterName}-controlplane'
  location: location
  tags: tags
}
// Identity for AKS to access Key Vault
resource aksToKeyVaultIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: 'mi-${clusterName}-keyvault'
  location: location
  tags: tags
}

// ============================================================================
// AKS CLUSTER
// ============================================================================

resource aksCluster 'Microsoft.ContainerService/managedClusters@2024-02-01' = {
  name: clusterName
  location: location
  tags: union(tags, {
    'azd-service-name': 'aks-cluster'
  })
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${clusterControlPlaneIdentity.id}': {}
    }
  }
  properties: {
    kubernetesVersion: kubernetesVersion
    dnsPrefix: uniqueString(subscription().subscriptionId, resourceGroup().id, clusterName)
    // Node pools configuration
    agentPoolProfiles: [
      {
        name: 'npsystem'
        count: aksSystemNodeCount
        vmSize: aksNodeSize
        osDiskSizeGB: 30
        osDiskType: 'Managed'
        osType: 'Linux'
        minCount: aksMinCount
        maxCount: aksMaxCount
        vnetSubnetID: subnetResourceId
        enableAutoScaling: true
        type: 'VirtualMachineScaleSets'
        mode: 'System'
        scaleSetPriority: 'Regular'
        scaleSetEvictionPolicy: 'Delete'
        orchestratorVersion: kubernetesVersion
        enableNodePublicIP: false
        maxPods: 30
        availabilityZones: [
          '1'
          '2'
          '3'
        ]
        upgradeSettings: {
          maxSurge: '33%'
        }
        nodeTaints: [
          'CriticalAddonsOnly=true:NoSchedule'
        ]
      }
      {
        name: 'npuser01'
        count: aksUserNodeCount
        vmSize: aksNodeSize
        osDiskSizeGB: 80
        osDiskType: 'Managed'
        osType: 'Linux'
        minCount: aksMinCount
        maxCount: aksMaxCount
        vnetSubnetID: subnetResourceId
        enableAutoScaling: aksEnableAutoScaling
        type: 'VirtualMachineScaleSets'
        mode: 'User'
        scaleSetPriority: 'Regular'
        scaleSetEvictionPolicy: 'Delete'
        orchestratorVersion: kubernetesVersion
        enableNodePublicIP: false
        maxPods: 30
        availabilityZones: [
          '1'
          '2'
          '3'
        ]
        upgradeSettings: {
          maxSurge: '33%'
        }
      }
    ]
    // Service principal configuration
    servicePrincipalProfile: {
      clientId: 'msi'
    }
    // Add-ons configuration
    addonProfiles: {
      httpApplicationRouting: {
        enabled: false
      }
      omsagent: {
        enabled: true
        config: {
          logAnalyticsWorkspaceResourceID: logAnalyticsWorkspaceId
        }
      }
      azureKeyvaultSecretsProvider: {
        enabled: true
        config: {
          enableSecretRotation: 'true'
          rotationPollInterval: '2m'
        }
      }
      aciConnectorLinux: {
        enabled: false
      }
      azurepolicy: {
        enabled: true
        config: {
          version: 'v2'
        }
      }
    }
    // Security and identity configuration
    oidcIssuerProfile: {
      enabled: true
    }
    podIdentityProfile: {
      enabled: false
    }
    securityProfile: {
      workloadIdentity: {
        enabled: true
      }
    }
    // Node resource group
    nodeResourceGroup: nodeResourceGroupName
    // RBAC configuration
    enableRBAC: true
    enablePodSecurityPolicy: false
    // Network configuration
    networkProfile: {
      networkPlugin: 'azure'
      networkPolicy: 'azure'
      outboundType: 'userDefinedRouting'
      loadBalancerSku: aksLoadBalancerSku
      loadBalancerProfile: null
      serviceCidr: aksServiceCidr
      dnsServiceIP: aksDnsServiceIP
      podCidr: null
    }
    // Azure AD integration
    aadProfile: {
      managed: true
      adminGroupObjectIDs: [
        k8sRbacEntraAdminGroupObjectID
      ]
      tenantID: k8sRbacEntraProfileTenantId
    }
    // Auto-scaler configuration
    autoScalerProfile: {
      'scan-interval': '10s'
      'scale-down-delay-after-add': '10m'
      'scale-down-delay-after-delete': '20s'
      'scale-down-delay-after-failure': '3m'
      'scale-down-unneeded-time': '10m'
      'scale-down-unready-time': '20m'
      'scale-down-utilization-threshold': '0.5'
      'max-graceful-termination-sec': '600'
      'balance-similar-node-groups': 'false'
      expander: 'random'
      'skip-nodes-with-local-storage': 'true'
      'skip-nodes-with-system-pods': 'true'
      'max-empty-bulk-delete': '10'
      'max-total-unready-percentage': '45'
      'ok-total-unready-count': '3'
    }
    // API server configuration
    apiServerAccessProfile: {
      authorizedIPRanges: clusterAuthorizedIPRanges
      enablePrivateCluster: false
    }
    // Auto-upgrade configuration
    autoUpgradeProfile: {
      upgradeChannel: 'patch'
      nodeOSUpgradeChannel: 'NodeImage'
    }
    // Disk encryption
    diskEncryptionSetID: null
  }
  dependsOn: [
    containerInsightsSolution
  ]
}

// ============================================================================
// RBAC ASSIGNMENTS
// ============================================================================

// AKS to Key Vault access
resource aksToKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: resourceGroup()
  name: guid(resourceGroup().id, keyVaultId, keyVaultSecretsUserRole, 'aks-secrets')
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: aksToKeyVaultIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}
resource aksToKeyVaultCertificateUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: resourceGroup()
  name: guid(resourceGroup().id, keyVaultId, keyVaultCertificateUserRole, 'aks-certs')
  properties: {
    roleDefinitionId: keyVaultCertificateUserRole
    principalId: aksToKeyVaultIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}
// AKS to Container Registry access
resource aksToAcrPullRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: resourceGroup()
  name: guid(resourceGroup().id, containerRegistryId, acrPullRole, 'aks-acr')
  properties: {
    roleDefinitionId: acrPullRole
    principalId: aksCluster.properties.identityProfile.kubeletidentity.objectId
    principalType: 'ServicePrincipal'
  }
}
// Monitoring metrics publisher role for kubelet
resource kubeletMonitoringMetricsPublisherRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: aksCluster
  name: guid(resourceGroup().id, clusterName, 'kubelet', monitoringMetricsPublisherRole)
  properties: {
    roleDefinitionId: monitoringMetricsPublisherRole
    principalId: aksCluster.properties.identityProfile.kubeletidentity.objectId
    principalType: 'ServicePrincipal'
  }
  dependsOn: [
    containerInsightsSolution
  ]
}
// Monitoring metrics publisher role for OMS agent
resource omsagentMonitoringMetricsPublisherRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: aksCluster
  name: guid(resourceGroup().id, clusterName, 'omsagent', monitoringMetricsPublisherRole)
  properties: {
    roleDefinitionId: monitoringMetricsPublisherRole
    principalId: aksCluster.properties.addonProfiles.omsagent.identity.objectId
    principalType: 'ServicePrincipal'
  }
  dependsOn: [
    containerInsightsSolution
  ]
}
// Managed Identity Operator role for AKS to Key Vault
resource aksToKeyVaultManagedIdentityOperatorRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: aksToKeyVaultIdentity
  name: guid(resourceGroup().id, aksToKeyVaultIdentity.id, managedIdentityOperatorRole)
  properties: {
    roleDefinitionId: managedIdentityOperatorRole
    principalId: aksCluster.properties.identityProfile.kubeletidentity.objectId
    principalType: 'ServicePrincipal'
  }
}

// ============================================================================
// NETWORKING RBAC
// ============================================================================

// Network contributor role for AKS on VNet (deployed to VNet resource group)
module vnetRbacAssignment 'rbac-vnet.bicep' = {
  name: 'vnet-rbac-assignment'
  scope: resourceGroup(vnetResourceGroup)
  params: {
    clusterIdentityObjectId: aksCluster.properties.identityProfile.kubeletidentity.objectId
    vnetResourceId: vnetResourceId
  }
}
// Node resource group RBAC (deployed after cluster creation)
module nodeResourceGroupRbac 'rbac-node-rg.bicep' = {
  name: 'node-resource-group-rbac'
  scope: resourceGroup(nodeResourceGroupName)
  params: {
    clusterIdentityObjectId: aksCluster.properties.identityProfile.kubeletidentity.objectId
  }
}

// ============================================================================
// AZURE POLICY ASSIGNMENTS
// ============================================================================

// Kubernetes cluster pod security baseline standards for Linux-based workloads
resource podSecurityBaselinePolicy 'Microsoft.Authorization/policyAssignments@2022-06-01' = {
  name: guid('42b8ef37-b724-4e24-bbc8-7a7708edfe00', resourceGroup().name, clusterName)
  properties: {
    displayName: '[${clusterName}] Kubernetes cluster pod security baseline standards'
    policyDefinitionId: '/providers/Microsoft.Authorization/policySetDefinitions/42b8ef37-b724-4e24-bbc8-7a7708edfe00'
    parameters: {
      excludedNamespaces: {
        value: [
          'kube-system'
          'gatekeeper-system'
          'azure-arc'
          'cluster-baseline-settings'
          'flux-system'
        ]
      }
      effect: {
        value: 'audit'
      }
    }
  }
}
// Ensure only allowed container images in Kubernetes cluster
resource allowedContainerImagesPolicy 'Microsoft.Authorization/policyAssignments@2022-06-01' = {
  name: guid('febd0533-8e55-448f-b837-bd0e06f16469', resourceGroup().name, clusterName)
  properties: {
    displayName: '[${clusterName}] Ensure only allowed container images'
    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/febd0533-8e55-448f-b837-bd0e06f16469'
    parameters: {
      allowedContainerImagesRegex: {
        value: '${containerRegistryName}\\.azurecr\\.io/.+$|mcr\\.microsoft\\.com/.+$|registry\\.hub\\.docker\\.com/library/.+$'
      }
      excludedNamespaces: {
        value: [
          'kube-system'
          'gatekeeper-system'
          'azure-arc'
          'cluster-baseline-settings'
          'flux-system'
        ]
      }
      effect: {
        value: 'deny'
      }
    }
  }
}
// Container CPU and memory resource limits
resource resourceLimitsPolicy 'Microsoft.Authorization/policyAssignments@2022-06-01' = {
  name: guid('e345eecc-fa47-480f-9e88-67dcc122b164', resourceGroup().name, clusterName)
  properties: {
    displayName: '[${clusterName}] Container CPU and memory resource limits'
    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/e345eecc-fa47-480f-9e88-67dcc122b164'
    parameters: {
      cpuLimit: {
        value: '1000m'
      }
      memoryLimit: {
        value: '1024Mi'
      }
      excludedNamespaces: {
        value: [
          'kube-system'
          'gatekeeper-system'
          'azure-arc'
          'cluster-baseline-settings'
          'flux-system'
        ]
      }
      effect: {
        value: 'deny'
      }
    }
  }
}

// ============================================================================
// MONITORING AND ALERTING
// ============================================================================

// TODO: Re-enable diagnostic settings after Log Analytics Workspace is properly created
// Diagnostic settings for AKS cluster
resource aksClusterDiagnosticSettings 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  scope: aksCluster
  name: 'default'
  properties: {
    workspaceId: logAnalyticsWorkspaceId
    logs: [
      {
        category: 'cluster-autoscaler'
        enabled: true
        // retentionPolicy: {
        //   days: 30
        //   enabled: true
        // }
      }
      {
        category: 'kube-controller-manager'
        enabled: true
        // retentionPolicy: {
        //   days: 30
        //   enabled: true
        // }
      }
      {
        category: 'kube-audit-admin'
        enabled: true
        // retentionPolicy: {
        //   days: 30
        //   enabled: true
        // }
      }
      {
        category: 'guard'
        enabled: true
        // retentionPolicy: {
        //   days: 30
        //   enabled: true
        // }
      }
    ]
    metrics: [
      {
        category: 'AllMetrics'
        enabled: true
        // retentionPolicy: {
        //   days: 30
        //   enabled: true
        // }
      }
    ]
  }
}
// Node CPU utilization alert
resource nodeCpuUtilizationAlert 'Microsoft.Insights/metricAlerts@2018-03-01' = {
  location: 'global'
  name: 'Node CPU utilization high for ${clusterName}'
  properties: {
    actions: []
    criteria: {
      allOf: [
        {
          criterionType: 'StaticThresholdCriterion'
          dimensions: [
            {
              name: 'host'
              operator: 'Include'
              values: ['*']
            }
          ]
          metricName: 'cpuUsagePercentage'
          metricNamespace: 'Insights.Container/nodes'
          name: 'Metric1'
          operator: 'GreaterThan'
          threshold: 80
          timeAggregation: 'Average'
          skipMetricValidation: true
        }
      ]
      'odata.type': 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'
    }
    description: 'Node CPU utilization across the cluster.'
    enabled: true
    evaluationFrequency: 'PT1M'
    scopes: [aksCluster.id]
    severity: 3
    targetResourceType: 'microsoft.containerservice/managedclusters'
    windowSize: 'PT5M'
  }
  dependsOn: [containerInsightsSolution]
}
// Pods in failed state alert
resource podsFailedStateAlert 'Microsoft.Insights/metricAlerts@2018-03-01' = {
  location: 'global'
  name: 'Pods in failed state for ${clusterName}'
  properties: {
    actions: []
    criteria: {
      allOf: [
        {
          criterionType: 'StaticThresholdCriterion'
          dimensions: [
            {
              name: 'phase'
              operator: 'Include'
              values: ['Failed']
            }
          ]
          metricName: 'podCount'
          metricNamespace: 'Insights.Container/pods'
          name: 'Metric1'
          operator: 'GreaterThan'
          threshold: 0
          timeAggregation: 'Average'
          skipMetricValidation: true
        }
      ]
      'odata.type': 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'
    }
    description: 'Pod status monitoring.'
    enabled: true
    evaluationFrequency: 'PT1M'
    scopes: [aksCluster.id]
    severity: 3
    targetResourceType: 'microsoft.containerservice/managedclusters'
    windowSize: 'PT5M'
  }
  dependsOn: [containerInsightsSolution]
}

// ============================================================================
// GITOPS CONFIGURATION (FLUX)
// ============================================================================

// Flux extension installation
resource fluxExtension 'Microsoft.KubernetesConfiguration/extensions@2022-11-01' = {
  scope: aksCluster
  name: 'flux'
  properties: {
    extensionType: 'microsoft.flux'
    autoUpgradeMinorVersion: true
    releaseTrain: 'Stable'
    scope: {
      cluster: {
        releaseNamespace: 'flux-system'
      }
    }
    configurationSettings: {
      'helm-controller.enabled': 'true'
      'source-controller.enabled': 'true'
      'kustomize-controller.enabled': 'true'
      'notification-controller.enabled': 'true'
      'image-automation-controller.enabled': 'false'
      'image-reflector-controller.enabled': 'false'
    }
    configurationProtectedSettings: {}
  }
}
// Flux configuration for GitOps bootstrapping
resource fluxConfiguration 'Microsoft.KubernetesConfiguration/fluxConfigurations@2022-03-01' = {
  scope: aksCluster
  name: 'bootstrap'
  properties: {
    scope: 'cluster'
    namespace: 'flux-system'
    sourceKind: 'GitRepository'
    gitRepository: {
      url: gitOpsBootstrappingRepoHttpsUrl
      timeoutInSeconds: 180
      syncIntervalInSeconds: 300
      repositoryRef: {
        branch: gitOpsBootstrappingRepoBranch
        tag: null
        semver: null
        commit: null
      }
      sshKnownHosts: ''
      httpsUser: null
      httpsCACert: null
      localAuthRef: null
    }
    kustomizations: {
      unified: {
        path: './cluster-manifests'
        dependsOn: []
        timeoutInSeconds: 300
        syncIntervalInSeconds: 300
        retryIntervalInSeconds: 300
        prune: true
        force: false
      }
    }
  }
  dependsOn: [
    fluxExtension
  ]
}

// ============================================================================
// OUTPUTS
// ============================================================================

output clusterName string = aksCluster.name
output clusterFqdn string = aksCluster.properties.fqdn
output clusterResourceId string = aksCluster.id
output kubeletIdentityObjectId string = aksCluster.properties.identityProfile.kubeletidentity.objectId
output kubeletIdentityClientId string = aksCluster.properties.identityProfile.kubeletidentity.clientId
output oidcIssuerUrl string = aksCluster.properties.oidcIssuerProfile.issuerURL
output nodeResourceGroupName string = nodeResourceGroupName
output logAnalyticsWorkspaceId string = logAnalyticsWorkspaceId
output aksToKeyVaultIdentityId string = aksToKeyVaultIdentity.id
output aksToKeyVaultIdentityClientId string = aksToKeyVaultIdentity.properties.clientId
// Configuration information for kubectl access
output kubectlCommand string = 'az aks get-credentials --name ${aksCluster.name} --resource-group ${resourceGroup().name}'
