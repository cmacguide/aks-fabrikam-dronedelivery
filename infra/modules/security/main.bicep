// Generated by Copilot
// Security module - Key Vault, Managed Identities, and Certificate management
targetScope = 'resourceGroup'

// ============================================================================
// PARAMETERS
// ============================================================================

@description('Primary deployment location')
param location string = resourceGroup().location
@description('Environment name')
param environmentName string
@description('Unique identifier for resource naming')
param uniqueId string
@description('Domain name for certificate generation')
param domainName string
@description('Tenant Id')
@secure()
param azureTenantId string
@description('Resource tags')
param tags object = {}

// ============================================================================
// VARIABLES
// ============================================================================

var keyVaultName = 'kv-${uniqueId}'
var keyVaultSecretsUserRole = subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')
var keyVaultCertificateUserRole = subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba')

// Managed Identity names for each microservice
var managedIdentityNames = {
  delivery: 'uid-delivery-${uniqueId}'
  ingestion: 'uid-ingestion-${uniqueId}'
  workflow: 'uid-workflow-${uniqueId}'
  dronescheduler: 'uid-dronescheduler-${uniqueId}'
  package: 'uid-package-${uniqueId}'
  ingressController: 'uid-ingress-${uniqueId}'
  applicationGateway: 'uid-appgw-${uniqueId}'
}

// ============================================================================
// KEY VAULT
// ============================================================================

resource keyVault 'Microsoft.KeyVault/vaults@2023-07-01' = {
  name: keyVaultName
  location: location
  tags: tags
  properties: {
    sku: {
      family: 'A'
      name: 'standard'
    }
    tenantId: azureTenantId
    enableRbacAuthorization: true
    enableSoftDelete: true
    softDeleteRetentionInDays: 7
    enablePurgeProtection: true // Enable purge protection for security
    networkAcls: {
      bypass: 'AzureServices'
      defaultAction: 'Allow'
      virtualNetworkRules: []
      ipRules: []
    }
    accessPolicies: []
  }
}

// ============================================================================
// MANAGED IDENTITIES
// ============================================================================

resource deliveryManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.delivery
  location: location
  tags: union(tags, { Service: 'delivery' })
}

resource ingestionManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.ingestion
  location: location
  tags: union(tags, { Service: 'ingestion' })
}

resource workflowManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.workflow
  location: location
  tags: union(tags, { Service: 'workflow' })
}

resource droneschedulerManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.dronescheduler
  location: location
  tags: union(tags, { Service: 'dronescheduler' })
}

resource packageManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.package
  location: location
  tags: union(tags, { Service: 'package' })
}

resource ingressControllerManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.ingressController
  location: location
  tags: union(tags, { Service: 'ingress-controller' })
}

resource applicationGatewayManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityNames.applicationGateway
  location: location
  tags: union(tags, { Service: 'application-gateway' })
}

// ============================================================================
// KEY VAULT RBAC ASSIGNMENTS
// ============================================================================

// Delivery service access to Key Vault secrets
resource deliveryKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(deliveryManagedIdentity.id, keyVault.id, keyVaultSecretsUserRole)
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: deliveryManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Ingestion service access to Key Vault secrets
resource ingestionKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(ingestionManagedIdentity.id, keyVault.id, keyVaultSecretsUserRole)
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: ingestionManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Workflow service access to Key Vault secrets
resource workflowKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(workflowManagedIdentity.id, keyVault.id, keyVaultSecretsUserRole)
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: workflowManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// DroneScheduler service access to Key Vault secrets
resource droneschedulerKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(droneschedulerManagedIdentity.id, keyVault.id, keyVaultSecretsUserRole)
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: droneschedulerManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Package service access to Key Vault secrets
resource packageKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(packageManagedIdentity.id, keyVault.id, keyVaultSecretsUserRole)
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: packageManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Ingress Controller access to Key Vault certificates
resource ingressControllerKeyVaultCertificateUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(ingressControllerManagedIdentity.id, keyVault.id, keyVaultCertificateUserRole)
  properties: {
    roleDefinitionId: keyVaultCertificateUserRole
    principalId: ingressControllerManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Application Gateway access to Key Vault certificates
resource applicationGatewayKeyVaultSecretsUserRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: keyVault
  name: guid(applicationGatewayManagedIdentity.id, keyVault.id, keyVaultSecretsUserRole)
  properties: {
    roleDefinitionId: keyVaultSecretsUserRole
    principalId: applicationGatewayManagedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// ============================================================================
// CERTIFICATES (Placeholder - will be created by post-deployment scripts)
// ============================================================================

// Note: Self-signed certificates will be generated and stored by the post-deployment hook
// This ensures the certificates are available for Application Gateway and Ingress Controller

// ============================================================================
// OUTPUTS
// ============================================================================

output keyVaultId string = keyVault.id
output keyVaultName string = keyVault.name
output keyVaultUri string = keyVault.properties.vaultUri

// Managed Identity outputs
output managedIdentities object = {
  delivery: {
    id: deliveryManagedIdentity.id
    name: deliveryManagedIdentity.name
    clientId: deliveryManagedIdentity.properties.clientId
    principalId: deliveryManagedIdentity.properties.principalId
  }
  ingestion: {
    id: ingestionManagedIdentity.id
    name: ingestionManagedIdentity.name
    clientId: ingestionManagedIdentity.properties.clientId
    principalId: ingestionManagedIdentity.properties.principalId
  }
  workflow: {
    id: workflowManagedIdentity.id
    name: workflowManagedIdentity.name
    clientId: workflowManagedIdentity.properties.clientId
    principalId: workflowManagedIdentity.properties.principalId
  }
  dronescheduler: {
    id: droneschedulerManagedIdentity.id
    name: droneschedulerManagedIdentity.name
    clientId: droneschedulerManagedIdentity.properties.clientId
    principalId: droneschedulerManagedIdentity.properties.principalId
  }
  package: {
    id: packageManagedIdentity.id
    name: packageManagedIdentity.name
    clientId: packageManagedIdentity.properties.clientId
    principalId: packageManagedIdentity.properties.principalId
  }
  ingressController: {
    id: ingressControllerManagedIdentity.id
    name: ingressControllerManagedIdentity.name
    clientId: ingressControllerManagedIdentity.properties.clientId
    principalId: ingressControllerManagedIdentity.properties.principalId
  }
  applicationGateway: {
    id: applicationGatewayManagedIdentity.id
    name: applicationGatewayManagedIdentity.name
    clientId: applicationGatewayManagedIdentity.properties.clientId
    principalId: applicationGatewayManagedIdentity.properties.principalId
  }
}
