// Generated by Copilot
// Networking module - Hub-Spoke topology with Application Gateway
targetScope = 'resourceGroup'

// ============================================================================
// PARAMETERS
// ============================================================================

@description('Primary deployment location')
param location string = resourceGroup().location

@description('Environment name')
param environmentName string

@description('Unique identifier for resource naming')
param uniqueId string

@description('Resource tags')
param tags object = {}

// ============================================================================
// VARIABLES
// ============================================================================

var hubVnetName = 'vnet-hub-${uniqueId}'
var spokeVnetName = 'vnet-spoke-${uniqueId}'
var applicationGatewayName = 'agw-${uniqueId}'
var publicIpName = 'pip-agw-${uniqueId}'
var bastionName = 'bas-${uniqueId}'
var firewallName = 'afw-${uniqueId}'

// Address spaces
var hubVnetAddressPrefix = '10.200.0.0/24'
var spokeVnetAddressPrefix = '10.240.0.0/16'

// Hub subnets
var gatewaySubnetPrefix = '10.200.0.64/27'
var azureFirewallSubnetPrefix = '10.200.0.0/26'
var bastionSubnetPrefix = '10.200.0.96/27'
var hubNodePoolSubnetPrefix = '10.200.0.128/26'

// Spoke subnets  
var aksSystemSubnetPrefix = '10.240.0.0/23'
var aksUserSubnetPrefix = '10.240.2.0/23'
var applicationGatewaySubnetPrefix = '10.240.4.0/27'
var privateEndpointsSubnetPrefix = '10.240.4.32/27'

// ============================================================================
// HUB VIRTUAL NETWORK
// ============================================================================

resource hubVnet 'Microsoft.Network/virtualNetworks@2023-09-01' = {
  name: hubVnetName
  location: location
  tags: tags
  properties: {
    addressSpace: {
      addressPrefixes: [
        hubVnetAddressPrefix
      ]
    }
    subnets: [
      {
        name: 'GatewaySubnet'
        properties: {
          addressPrefix: gatewaySubnetPrefix
        }
      }
      {
        name: 'AzureFirewallSubnet'
        properties: {
          addressPrefix: azureFirewallSubnetPrefix
        }
      }
      {
        name: 'AzureBastionSubnet'
        properties: {
          addressPrefix: bastionSubnetPrefix
        }
      }
      {
        name: 'snet-hubnodes'
        properties: {
          addressPrefix: hubNodePoolSubnetPrefix
          networkSecurityGroup: {
            id: hubNsg.id
          }
        }
      }
    ]
  }
}

// ============================================================================
// SPOKE VIRTUAL NETWORK
// ============================================================================

resource spokeVnet 'Microsoft.Network/virtualNetworks@2023-09-01' = {
  name: spokeVnetName
  location: location
  tags: tags
  properties: {
    addressSpace: {
      addressPrefixes: [
        spokeVnetAddressPrefix
      ]
    }
    subnets: [
      {
        name: 'snet-clustersystem'
        properties: {
          addressPrefix: aksSystemSubnetPrefix
          networkSecurityGroup: {
            id: aksSystemNsg.id
          }
          routeTable: {
            id: routeTable.id
          }
        }
      }
      {
        name: 'snet-clusternodes'
        properties: {
          addressPrefix: aksUserSubnetPrefix
          networkSecurityGroup: {
            id: aksUserNsg.id
          }
          routeTable: {
            id: routeTable.id
          }
        }
      }
      {
        name: 'snet-applicationgateway'
        properties: {
          addressPrefix: applicationGatewaySubnetPrefix
          networkSecurityGroup: {
            id: applicationGatewayNsg.id
          }
        }
      }
      {
        name: 'snet-privateendpoints'
        properties: {
          addressPrefix: privateEndpointsSubnetPrefix
          networkSecurityGroup: {
            id: privateEndpointsNsg.id
          }
          privateEndpointNetworkPolicies: 'Disabled'
        }
      }
    ]
  }
}

// ============================================================================
// NETWORK SECURITY GROUPS
// ============================================================================

resource hubNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-hub-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: [
      {
        name: 'AllowHttpsInbound'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 100
          direction: 'Inbound'
        }
      }
    ]
  }
}

resource aksSystemNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-akssystem-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: []
  }
}

resource aksUserNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-aksuser-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: []
  }
}

resource applicationGatewayNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-appgw-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: [
      {
        name: 'Allow_GWM'
        properties: {
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRange: '65200-65535'
          sourceAddressPrefix: 'GatewayManager'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 100
          direction: 'Inbound'
        }
      }
      {
        name: 'Allow_HTTP'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '80'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 110
          direction: 'Inbound'
        }
      }
      {
        name: 'Allow_HTTPS'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 120
          direction: 'Inbound'
        }
      }
    ]
  }
}

resource privateEndpointsNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-pe-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: []
  }
}

// ============================================================================
// ROUTE TABLE
// ============================================================================

resource routeTable 'Microsoft.Network/routeTables@2023-09-01' = {
  name: 'rt-aks-${uniqueId}'
  location: location
  tags: tags
  properties: {
    routes: [
      {
        name: 'DefaultRoute'
        properties: {
          addressPrefix: '0.0.0.0/0'
          nextHopType: 'VirtualAppliance'
          nextHopIpAddress: '10.200.0.36' // Azure Firewall private IP
        }
      }
    ]
  }
}

// ============================================================================
// VNET PEERING
// ============================================================================

resource hubToSpokeVnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-09-01' = {
  parent: hubVnet
  name: '${hubVnetName}-to-${spokeVnetName}'
  properties: {
    allowVirtualNetworkAccess: true
    allowForwardedTraffic: true
    allowGatewayTransit: false
    useRemoteGateways: false
    remoteVirtualNetwork: {
      id: spokeVnet.id
    }
  }
}

resource spokeToHubVnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-09-01' = {
  parent: spokeVnet
  name: '${spokeVnetName}-to-${hubVnetName}'
  properties: {
    allowVirtualNetworkAccess: true
    allowForwardedTraffic: true
    allowGatewayTransit: false
    useRemoteGateways: false
    remoteVirtualNetwork: {
      id: hubVnet.id
    }
  }
}

// ============================================================================
// PUBLIC IP FOR APPLICATION GATEWAY
// ============================================================================

resource applicationGatewayPublicIp 'Microsoft.Network/publicIPAddresses@2023-09-01' = {
  name: publicIpName
  location: location
  tags: tags
  sku: {
    name: 'Standard'
    tier: 'Regional'
  }
  properties: {
    publicIPAllocationMethod: 'Static'
    dnsSettings: {
      domainNameLabel: 'agw-${uniqueId}'
    }
  }
}

// ============================================================================
// APPLICATION GATEWAY
// ============================================================================

resource applicationGateway 'Microsoft.Network/applicationGateways@2023-09-01' = {
  name: applicationGatewayName
  location: location
  tags: tags
  properties: {
    sku: {
      name: 'WAF_v2'
      tier: 'WAF_v2'
      capacity: 2
    }
    gatewayIPConfigurations: [
      {
        name: 'appGatewayIpConfig'
        properties: {
          subnet: {
            id: '${spokeVnet.id}/subnets/snet-applicationgateway'
          }
        }
      }
    ]
    frontendIPConfigurations: [
      {
        name: 'appGwPublicFrontendIp'
        properties: {
          privateIPAllocationMethod: 'Dynamic'
          publicIPAddress: {
            id: applicationGatewayPublicIp.id
          }
        }
      }
    ]
    frontendPorts: [
      {
        name: 'port_80'
        properties: {
          port: 80
        }
      }
      {
        name: 'port_443'
        properties: {
          port: 443
        }
      }
    ]
    backendAddressPools: [
      {
        name: 'defaultaddresspool'
        properties: {}
      }
    ]
    backendHttpSettingsCollection: [
      {
        name: 'defaulthttpsetting'
        properties: {
          port: 80
          protocol: 'Http'
          cookieBasedAffinity: 'Disabled'
          pickHostNameFromBackendAddress: false
          requestTimeout: 20
        }
      }
    ]
    httpListeners: [
      {
        name: 'defaulthttplistener'
        properties: {
          frontendIPConfiguration: {
            id: resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', applicationGatewayName, 'appGwPublicFrontendIp')
          }
          frontendPort: {
            id: resourceId('Microsoft.Network/applicationGateways/frontendPorts', applicationGatewayName, 'port_80')
          }
          protocol: 'Http'
          requireServerNameIndication: false
        }
      }
    ]
    requestRoutingRules: [
      {
        name: 'defaultrule'
        properties: {
          ruleType: 'Basic'
          priority: 100
          httpListener: {
            id: resourceId('Microsoft.Network/applicationGateways/httpListeners', applicationGatewayName, 'defaulthttplistener')
          }
          backendAddressPool: {
            id: resourceId('Microsoft.Network/applicationGateways/backendAddressPools', applicationGatewayName, 'defaultaddresspool')
          }
          backendHttpSettings: {
            id: resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', applicationGatewayName, 'defaulthttpsetting')
          }
        }
      }
    ]
    enableHttp2: false
    webApplicationFirewallConfiguration: {
      enabled: true
      firewallMode: 'Prevention'
      ruleSetType: 'OWASP'
      ruleSetVersion: '3.2'
    }
  }
}

// ============================================================================
// OUTPUTS
// ============================================================================

output hubVnetId string = hubVnet.id
output spokeVnetId string = spokeVnet.id
output aksSubnetId string = '${spokeVnet.id}/subnets/snet-clusternodes'
output aksSystemSubnetId string = '${spokeVnet.id}/subnets/snet-clustersystem'
output applicationGatewaySubnetId string = '${spokeVnet.id}/subnets/snet-applicationgateway'
output privateEndpointsSubnetId string = '${spokeVnet.id}/subnets/snet-privateendpoints'
output applicationGatewayId string = applicationGateway.id
output applicationGatewayFqdn string = applicationGatewayPublicIp.properties.dnsSettings.fqdn
output applicationGatewayPublicIpAddress string = applicationGatewayPublicIp.properties.ipAddress
