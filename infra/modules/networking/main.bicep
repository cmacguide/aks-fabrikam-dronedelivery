// Generated by Copilot
// Networking module - Hub-Spoke topology with Application Gateway
targetScope = 'resourceGroup'

// ============================================================================
// PARAMETERS
// ============================================================================

@description('Primary deployment location')
param location string = resourceGroup().location

@description('Unique identifier for resource naming')
param uniqueId string

@description('Resource tags')
param tags object = {}

// ============================================================================
// VARIABLES
// ============================================================================

var hubVnetName = 'vnet-hub-${uniqueId}'
var spokeVnetName = 'vnet-spoke-${uniqueId}'
var applicationGatewayName = 'agw-${uniqueId}'
var publicIpName = 'pip-agw-${uniqueId}'
var firewallName = 'afw-${uniqueId}'

// Address spaces
var hubVnetAddressPrefix = '10.200.0.0/24'
var spokeVnetAddressPrefix = '10.240.0.0/16'

// Hub subnets
var gatewaySubnetPrefix = '10.200.0.64/27'
var azureFirewallSubnetPrefix = '10.200.0.0/26'
var bastionSubnetPrefix = '10.200.0.96/27'
var hubNodePoolSubnetPrefix = '10.200.0.128/26'

// Spoke subnets  
var aksSystemSubnetPrefix = '10.240.0.0/23'
var aksUserSubnetPrefix = '10.240.2.0/23'
var applicationGatewaySubnetPrefix = '10.240.4.0/27'
var privateEndpointsSubnetPrefix = '10.240.4.32/27'

// ============================================================================
// HUB VIRTUAL NETWORK
// ============================================================================

resource hubVnet 'Microsoft.Network/virtualNetworks@2023-09-01' = {
  name: hubVnetName
  location: location
  tags: tags
  properties: {
    addressSpace: {
      addressPrefixes: [
        hubVnetAddressPrefix
      ]
    }
    subnets: [
      {
        name: 'GatewaySubnet'
        properties: {
          addressPrefix: gatewaySubnetPrefix
        }
      }
      {
        name: 'AzureFirewallSubnet'
        properties: {
          addressPrefix: azureFirewallSubnetPrefix
        }
      }
      {
        name: 'AzureBastionSubnet'
        properties: {
          addressPrefix: bastionSubnetPrefix
        }
      }
      {
        name: 'snet-hubnodes'
        properties: {
          addressPrefix: hubNodePoolSubnetPrefix
          networkSecurityGroup: {
            id: hubNsg.id
          }
        }
      }
    ]
  }
}

// ============================================================================
// SPOKE VIRTUAL NETWORK
// ============================================================================

resource spokeVnet 'Microsoft.Network/virtualNetworks@2023-09-01' = {
  name: spokeVnetName
  location: location
  tags: tags
  properties: {
    addressSpace: {
      addressPrefixes: [
        spokeVnetAddressPrefix
      ]
    }
    subnets: [
      {
        name: 'snet-clustersystem'
        properties: {
          addressPrefix: aksSystemSubnetPrefix
          networkSecurityGroup: {
            id: aksSystemNsg.id
          }
          routeTable: {
            id: routeTable.id
          }
        }
      }
      {
        name: 'snet-clusternodes'
        properties: {
          addressPrefix: aksUserSubnetPrefix
          networkSecurityGroup: {
            id: aksUserNsg.id
          }
          routeTable: {
            id: routeTable.id
          }
        }
      }
      {
        name: 'snet-applicationgateway'
        properties: {
          addressPrefix: applicationGatewaySubnetPrefix
          networkSecurityGroup: {
            id: applicationGatewayNsg.id
          }
        }
      }
      {
        name: 'snet-privateendpoints'
        properties: {
          addressPrefix: privateEndpointsSubnetPrefix
          networkSecurityGroup: {
            id: privateEndpointsNsg.id
          }
          privateEndpointNetworkPolicies: 'Disabled'
        }
      }
    ]
  }
}

// ============================================================================
// NETWORK SECURITY GROUPS
// ============================================================================

resource hubNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-hub-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: [
      {
        name: 'AllowHttpsInbound'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 100
          direction: 'Inbound'
        }
      }
    ]
  }
}

resource aksSystemNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-akssystem-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: []
  }
}

resource aksUserNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-aksuser-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: []
  }
}

resource applicationGatewayNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-appgw-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: [
      {
        name: 'Allow_GWM'
        properties: {
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRange: '65200-65535'
          sourceAddressPrefix: 'GatewayManager'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 100
          direction: 'Inbound'
        }
      }
      {
        name: 'Allow_HTTP'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '80'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 110
          direction: 'Inbound'
        }
      }
      {
        name: 'Allow_HTTPS'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 120
          direction: 'Inbound'
        }
      }
    ]
  }
}

resource privateEndpointsNsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: 'nsg-pe-${uniqueId}'
  location: location
  tags: tags
  properties: {
    securityRules: []
  }
}

// ============================================================================
// AZURE FIREWALL PUBLIC IP
// ============================================================================

resource firewallPublicIp 'Microsoft.Network/publicIPAddresses@2023-09-01' = {
  name: 'pip-${firewallName}'
  location: location
  tags: tags
  zones: ['1', '2', '3']
  sku: {
    name: 'Standard'
  }
  properties: {
    publicIPAllocationMethod: 'Static'
    idleTimeoutInMinutes: 4
    publicIPAddressVersion: 'IPv4'
  }
}

// ============================================================================
// IP GROUPS FOR AKS SUBNETS
// ============================================================================

resource aksIpGroup 'Microsoft.Network/ipGroups@2023-09-01' = {
  name: 'ipg-aks-${uniqueId}'
  location: location
  tags: tags
  properties: {
    ipAddresses: [
      aksSystemSubnetPrefix
      aksUserSubnetPrefix
    ]
  }
}

// ============================================================================
// AZURE FIREWALL
// ============================================================================

resource azureFirewall 'Microsoft.Network/azureFirewalls@2023-09-01' = {
  name: firewallName
  location: location
  tags: tags
  zones: ['1', '2', '3']
  properties: {
    sku: {
      name: 'AZFW_VNet'
      tier: 'Standard'
    }
    threatIntelMode: 'Alert'
    ipConfigurations: [
      {
        name: 'firewallIpConfig'
        properties: {
          subnet: {
            id: '${hubVnet.id}/subnets/AzureFirewallSubnet'
          }
          publicIPAddress: {
            id: firewallPublicIp.id
          }
        }
      }
    ]
    natRuleCollections: []
    networkRuleCollections: [
      {
        name: 'org-wide-allowed'
        properties: {
          action: {
            type: 'Allow'
          }
          priority: 100
          rules: [
            {
              name: 'dns'
              sourceAddresses: ['*']
              protocols: ['UDP']
              destinationAddresses: ['*']
              destinationPorts: ['53']
            }
            {
              name: 'ntp'
              description: 'Network Time Protocol (NTP) time synchronization'
              sourceAddresses: ['*']
              protocols: ['UDP']
              destinationPorts: ['123']
              destinationAddresses: ['*']
            }
          ]
        }
      }
      {
        name: 'AKS-Global-Requirements'
        properties: {
          action: {
            type: 'Allow'
          }
          priority: 200
          rules: [
            {
              name: 'tunnel-front-pod-tcp'
              description: 'Tunnel front pod to communicate with the tunnel end on the API server'
              sourceIpGroups: [aksIpGroup.id]
              protocols: ['TCP']
              destinationPorts: ['22', '9000']
              destinationAddresses: ['AzureCloud']
            }
            {
              name: 'tunnel-front-pod-udp'
              description: 'Tunnel front pod to communicate with the tunnel end on the API server'
              sourceIpGroups: [aksIpGroup.id]
              protocols: ['UDP']
              destinationPorts: ['1194']
              destinationAddresses: ['AzureCloud']
            }
            {
              name: 'managed-k8s-api-tcp-443'
              description: 'API server communication without SNI extension'
              protocols: ['TCP']
              sourceIpGroups: [aksIpGroup.id]
              destinationAddresses: ['AzureCloud']
              destinationPorts: ['443']
            }
          ]
        }
      }
      {
        name: 'AKS-Fabrikam-DroneDelivery'
        properties: {
          action: {
            type: 'Allow'
          }
          priority: 300
          rules: [
            {
              name: 'servicebus'
              description: 'Azure Service Bus access for apps'
              protocols: ['TCP']
              sourceIpGroups: [aksIpGroup.id]
              destinationAddresses: ['ServiceBus.EastUS2']
              destinationPorts: ['5671']
            }
            {
              name: 'azure-cosmosdb'
              description: 'Azure Cosmos DB access'
              protocols: ['TCP']
              sourceIpGroups: [aksIpGroup.id]
              destinationAddresses: ['AzureCosmosDB.EastUS2']
              destinationPorts: ['443']
            }
            {
              name: 'azure-mongodb'
              description: 'Azure MongoDB access'
              protocols: ['TCP']
              sourceIpGroups: [aksIpGroup.id]
              destinationAddresses: ['AzureCosmosDB.EastUS2']
              destinationPorts: ['10255']
            }
            {
              name: 'azure-keyvault'
              description: 'Azure Key Vault access'
              protocols: ['TCP']
              sourceIpGroups: [aksIpGroup.id]
              destinationAddresses: ['AzureKeyVault.EastUS2']
              destinationPorts: ['443']
            }
            {
              name: 'azure-monitor'
              description: 'Azure Monitor access'
              protocols: ['TCP']
              sourceIpGroups: [aksIpGroup.id]
              destinationAddresses: ['AzureMonitor']
              destinationPorts: ['443']
            }
          ]
        }
      }
    ]
    applicationRuleCollections: [
      {
        name: 'AKS-Global-Requirements'
        properties: {
          action: {
            type: 'Allow'
          }
          priority: 200
          rules: [
            {
              name: 'nodes-to-api-server'
              description: 'Node to API server communication'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                '*.hcp.eastus2.azmk8s.io'
                '*.tun.eastus2.azmk8s.io'
              ]
            }
            {
              name: 'microsoft-container-registry'
              description: 'Microsoft Container Registry access'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                '*.cdn.mscr.io'
                'mcr.microsoft.com'
                '*.data.mcr.microsoft.com'
              ]
            }
            {
              name: 'management-plane'
              description: 'Azure management plane access'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [split(environment().resourceManager, '/')[2]]
            }
            {
              name: 'aad-auth'
              description: 'Microsoft Entra authentication'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [split(environment().authentication.loginEndpoint, '/')[2]]
            }
            {
              name: 'apt-get'
              description: 'Microsoft packages repository'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: ['packages.microsoft.com']
            }
            {
              name: 'cluster-binaries'
              description: 'Required binaries repository'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: ['acs-mirror.azureedge.net']
            }
            {
              name: 'ubuntu-security-patches'
              description: 'Ubuntu security patches'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Http'
                  port: 80
                }
              ]
              targetFqdns: [
                'security.ubuntu.com'
                'azure.archive.ubuntu.com'
                'changelogs.ubuntu.com'
              ]
            }
            {
              name: 'azure-monitor'
              description: 'Azure Monitor for containers'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                'dc.services.visualstudio.com'
                '*.ods.opinsights.azure.com'
                '*.oms.opinsights.azure.com'
                '*.microsoftonline.com'
                '*.monitoring.azure.com'
              ]
            }
            {
              name: 'azure-policy'
              description: 'Azure Policy requirements'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                'gov-prod-policy-data.trafficmanager.net'
                'raw.githubusercontent.com'
                'dc.services.visualstudio.com'
                'data.policy.${environment().suffixes.storage}'
                'store.policy.${environment().suffixes.storage}'
              ]
            }
          ]
        }
      }
      {
        name: 'Flux-Requirements'
        properties: {
          action: {
            type: 'Allow'
          }
          priority: 300
          rules: [
            {
              name: 'flux-to-github'
              description: 'Flux to GitHub repository'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                'github.com'
                'api.github.com'
              ]
            }
            {
              name: 'accompanying-container-registries'
              description: 'Additional container registries and services'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                'eastus2.dp.kubernetesconfiguration.azure.com'
                'mcr.microsoft.com'
                'raw.githubusercontent.com'
                split(environment().resourceManager, '/')[2]
                split(environment().authentication.loginEndpoint, '/')[2]
                '*.blob.${environment().suffixes.storage}'
                'azurearcfork8s.azurecr.io'
                '*.docker.io'
                '*.docker.com'
                'ghcr.io'
                'pkg-containers.githubusercontent.com'
              ]
            }
          ]
        }
      }
      {
        name: 'AKS-Fabrikam-DroneDelivery'
        properties: {
          action: {
            type: 'Allow'
          }
          priority: 400
          rules: [
            {
              name: 'container-registries'
              description: 'Additional container registries'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 443
                }
              ]
              targetFqdns: [
                'gcr.io'
                'storage.googleapis.com'
                'aksrepos.azurecr.io'
                '*.docker.io'
                '*.docker.com'
                '*.azurecr.io'
              ]
            }
            {
              name: 'azure-cache-redis'
              description: 'Azure Redis Cache access'
              sourceIpGroups: [aksIpGroup.id]
              protocols: [
                {
                  protocolType: 'Https'
                  port: 6380
                }
              ]
              targetFqdns: ['*.redis.cache.windows.net']
            }
          ]
        }
      }
    ]
  }
}

// ============================================================================
// ROUTE TABLE
// ============================================================================

resource routeTable 'Microsoft.Network/routeTables@2023-09-01' = {
  name: 'rt-aks-${uniqueId}'
  location: location
  tags: tags
  properties: {
    routes: [
      {
        name: 'DefaultRoute'
        properties: {
          addressPrefix: '0.0.0.0/0'
          nextHopType: 'VirtualAppliance'
          nextHopIpAddress: azureFirewall.properties.ipConfigurations[0].properties.privateIPAddress
        }
      }
    ]
  }
}

// ============================================================================
// VNET PEERING
// ============================================================================

resource hubToSpokeVnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-09-01' = {
  parent: hubVnet
  name: '${hubVnetName}-to-${spokeVnetName}'
  properties: {
    allowVirtualNetworkAccess: true
    allowForwardedTraffic: true
    allowGatewayTransit: false
    useRemoteGateways: false
    remoteVirtualNetwork: {
      id: spokeVnet.id
    }
  }
}

resource spokeToHubVnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2023-09-01' = {
  parent: spokeVnet
  name: '${spokeVnetName}-to-${hubVnetName}'
  properties: {
    allowVirtualNetworkAccess: true
    allowForwardedTraffic: true
    allowGatewayTransit: false
    useRemoteGateways: false
    remoteVirtualNetwork: {
      id: hubVnet.id
    }
  }
}

// ============================================================================
// PUBLIC IP FOR APPLICATION GATEWAY
// ============================================================================

resource applicationGatewayPublicIp 'Microsoft.Network/publicIPAddresses@2023-09-01' = {
  name: publicIpName
  location: location
  tags: tags
  sku: {
    name: 'Standard'
    tier: 'Regional'
  }
  properties: {
    publicIPAllocationMethod: 'Static'
    dnsSettings: {
      domainNameLabel: 'agw-${uniqueId}'
    }
  }
}

// ============================================================================
// APPLICATION GATEWAY
// ============================================================================

resource applicationGateway 'Microsoft.Network/applicationGateways@2023-09-01' = {
  name: applicationGatewayName
  location: location
  tags: tags
  properties: {
    sku: {
      name: 'WAF_v2'
      tier: 'WAF_v2'
      capacity: 2
    }
    gatewayIPConfigurations: [
      {
        name: 'appGatewayIpConfig'
        properties: {
          subnet: {
            id: '${spokeVnet.id}/subnets/snet-applicationgateway'
          }
        }
      }
    ]
    frontendIPConfigurations: [
      {
        name: 'appGwPublicFrontendIp'
        properties: {
          privateIPAllocationMethod: 'Dynamic'
          publicIPAddress: {
            id: applicationGatewayPublicIp.id
          }
        }
      }
    ]
    frontendPorts: [
      {
        name: 'port_80'
        properties: {
          port: 80
        }
      }
      {
        name: 'port_443'
        properties: {
          port: 443
        }
      }
    ]
    backendAddressPools: [
      {
        name: 'defaultaddresspool'
        properties: {}
      }
    ]
    backendHttpSettingsCollection: [
      {
        name: 'defaulthttpsetting'
        properties: {
          port: 80
          protocol: 'Http'
          cookieBasedAffinity: 'Disabled'
          pickHostNameFromBackendAddress: false
          requestTimeout: 20
        }
      }
    ]
    httpListeners: [
      {
        name: 'defaulthttplistener'
        properties: {
          frontendIPConfiguration: {
            id: resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', applicationGatewayName, 'appGwPublicFrontendIp')
          }
          frontendPort: {
            id: resourceId('Microsoft.Network/applicationGateways/frontendPorts', applicationGatewayName, 'port_80')
          }
          protocol: 'Http'
          requireServerNameIndication: false
        }
      }
    ]
    requestRoutingRules: [
      {
        name: 'defaultrule'
        properties: {
          ruleType: 'Basic'
          priority: 100
          httpListener: {
            id: resourceId('Microsoft.Network/applicationGateways/httpListeners', applicationGatewayName, 'defaulthttplistener')
          }
          backendAddressPool: {
            id: resourceId('Microsoft.Network/applicationGateways/backendAddressPools', applicationGatewayName, 'defaultaddresspool')
          }
          backendHttpSettings: {
            id: resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', applicationGatewayName, 'defaulthttpsetting')
          }
        }
      }
    ]
    enableHttp2: false
    webApplicationFirewallConfiguration: {
      enabled: true
      firewallMode: 'Prevention'
      ruleSetType: 'OWASP'
      ruleSetVersion: '3.2'
    }
  }
}

// ============================================================================
// OUTPUTS
// ============================================================================

output hubVnetId string = hubVnet.id
output spokeVnetId string = spokeVnet.id
output aksSubnetId string = '${spokeVnet.id}/subnets/snet-clusternodes'
output aksSystemSubnetId string = '${spokeVnet.id}/subnets/snet-clustersystem'
output applicationGatewaySubnetId string = '${spokeVnet.id}/subnets/snet-applicationgateway'
output privateEndpointsSubnetId string = '${spokeVnet.id}/subnets/snet-privateendpoints'
output applicationGatewayId string = applicationGateway.id
output applicationGatewayFqdn string = applicationGatewayPublicIp.properties.dnsSettings.fqdn
output applicationGatewayPublicIpAddress string = applicationGatewayPublicIp.properties.ipAddress
output azureFirewallId string = azureFirewall.id
output azureFirewallPrivateIp string = azureFirewall.properties.ipConfigurations[0].properties.privateIPAddress
