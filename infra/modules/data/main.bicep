// Generated by Copilot
// Data services module - Cosmos DB, Redis Cache, Service Bus
targetScope = 'resourceGroup'

// ============================================================================
// PARAMETERS
// ============================================================================

@description('Primary deployment location')
param location string = resourceGroup().location

@description('Secondary location for geo-redundancy')
param geoRedundancyLocation string

@description('Environment name')
param environmentName string

@description('Unique identifier for resource naming')
param uniqueId string

@description('Resource tags')
param tags object = {}

// ============================================================================
// VARIABLES
// ============================================================================

var cosmosDbAccountName = 'cosmos-${uniqueId}'
var packageCosmosDbName = 'cosmon-package-${uniqueId}'
var deliveryRedisName = 'redis-delivery-${uniqueId}'
var serviceBusNamespaceName = 'sbns-ingest-${uniqueId}'
var serviceBusQueueName = 'sb-ingest-${uniqueId}'

// Environment-specific configurations
var cosmosDbConfig = {
  dev: {
    consistencyLevel: 'Session'
    maxIntervalInSeconds: 300
    maxStalenessPrefix: 100000
    enableMultipleWriteLocations: false
  }
  staging: {
    consistencyLevel: 'Session'
    maxIntervalInSeconds: 300
    maxStalenessPrefix: 100000
    enableMultipleWriteLocations: true
  }
  prod: {
    consistencyLevel: 'BoundedStaleness'
    maxIntervalInSeconds: 86400
    maxStalenessPrefix: 300000
    enableMultipleWriteLocations: true
  }
}

var redisConfig = {
  dev: {
    sku: 'Basic'
    family: 'C'
    capacity: 0
  }
  staging: {
    sku: 'Standard'
    family: 'C'
    capacity: 1
  }
  prod: {
    sku: 'Premium'
    family: 'P'
    capacity: 1
  }
}

var serviceBusConfig = {
  dev: {
    sku: 'Basic'
    tier: 'Basic'
  }
  staging: {
    sku: 'Standard'
    tier: 'Standard'
  }
  prod: {
    sku: 'Premium'
    tier: 'Premium'
  }
}

// ============================================================================
// COSMOS DB ACCOUNTS
// ============================================================================

// Main Cosmos DB account for delivery and drone scheduler services
resource cosmosDbAccount 'Microsoft.DocumentDB/databaseAccounts@2023-09-15' = {
  name: cosmosDbAccountName
  location: location
  tags: union(tags, { 'Service': 'CosmosDB' })
  kind: 'GlobalDocumentDB'
  properties: {
    consistencyPolicy: {
      defaultConsistencyLevel: cosmosDbConfig[environmentName].consistencyLevel
      maxIntervalInSeconds: cosmosDbConfig[environmentName].maxIntervalInSeconds
      maxStalenessPrefix: cosmosDbConfig[environmentName].maxStalenessPrefix
    }
    locations: environmentName == 'dev' ? [
      {
        locationName: location
        failoverPriority: 0
        isZoneRedundant: false
      }
    ] : [
      {
        locationName: location
        failoverPriority: 0
        isZoneRedundant: true
      }
      {
        locationName: geoRedundancyLocation
        failoverPriority: 1
        isZoneRedundant: true
      }
    ]
    databaseAccountOfferType: 'Standard'
    enableMultipleWriteLocations: cosmosDbConfig[environmentName].enableMultipleWriteLocations
    isVirtualNetworkFilterEnabled: false
    virtualNetworkRules: []
    disableKeyBasedMetadataWriteAccess: false
    enableFreeTier: environmentName == 'dev'
    enableAutomaticFailover: environmentName != 'dev'
    capabilities: []
    ipRules: []
  }
}

// MongoDB API Cosmos DB for package service
resource packageCosmosDb 'Microsoft.DocumentDB/databaseAccounts@2023-09-15' = {
  name: packageCosmosDbName
  location: location
  tags: union(tags, { 'Service': 'Package-CosmosDB' })
  kind: 'MongoDB'
  properties: {
    consistencyPolicy: {
      defaultConsistencyLevel: cosmosDbConfig[environmentName].consistencyLevel
      maxIntervalInSeconds: cosmosDbConfig[environmentName].maxIntervalInSeconds
      maxStalenessPrefix: cosmosDbConfig[environmentName].maxStalenessPrefix
    }
    locations: [
      {
        locationName: location
        failoverPriority: 0
        isZoneRedundant: environmentName != 'dev'
      }
    ]
    databaseAccountOfferType: 'Standard'
    apiProperties: {
      serverVersion: '4.2'
    }
    isVirtualNetworkFilterEnabled: false
    virtualNetworkRules: []
    disableKeyBasedMetadataWriteAccess: false
    enableFreeTier: false
    enableAutomaticFailover: environmentName != 'dev'
    capabilities: [
      {
        name: 'EnableMongo'
      }
    ]
    ipRules: []
  }
}

// ============================================================================
// REDIS CACHE
// ============================================================================

resource deliveryRedisCache 'Microsoft.Cache/redis@2023-08-01' = {
  name: deliveryRedisName
  location: location
  tags: union(tags, { 'Service': 'Delivery-Redis' })
  properties: {
    sku: {
      name: redisConfig[environmentName].sku
      family: redisConfig[environmentName].family
      capacity: redisConfig[environmentName].capacity
    }
    enableNonSslPort: false
    minimumTlsVersion: '1.2'
    redisConfiguration: {
      'maxmemory-policy': 'allkeys-lru'
    }
    redisVersion: '6'
    publicNetworkAccess: 'Enabled'
  }
}

// ============================================================================
// SERVICE BUS
// ============================================================================

resource serviceBusNamespace 'Microsoft.ServiceBus/namespaces@2022-10-01-preview' = {
  name: serviceBusNamespaceName
  location: location
  tags: union(tags, { 'Service': 'Ingestion-ServiceBus' })
  sku: {
    name: serviceBusConfig[environmentName].sku
    tier: serviceBusConfig[environmentName].tier
  }
  properties: {
    minimumTlsVersion: '1.2'
    publicNetworkAccess: 'Enabled'
    disableLocalAuth: false
    zoneRedundant: environmentName == 'prod'
  }
}

resource serviceBusQueue 'Microsoft.ServiceBus/namespaces/queues@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: serviceBusQueueName
  properties: {
    lockDuration: 'PT1M'
    maxSizeInMegabytes: 1024
    requiresDuplicateDetection: false
    requiresSession: false
    defaultMessageTimeToLive: 'P14D'
    deadLetteringOnMessageExpiration: true
    duplicateDetectionHistoryTimeWindow: 'PT10M'
    maxDeliveryCount: 10
    autoDeleteOnIdle: 'P10675199DT2H48M5.4775807S'
    enablePartitioning: false
    enableExpress: false
  }
}

// Service Bus authorization rules
resource serviceBusListenRule 'Microsoft.ServiceBus/namespaces/AuthorizationRules@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: 'IngestionServiceAccessKey'
  properties: {
    rights: [
      'Listen'
      'Send'
    ]
  }
}

resource serviceBusSendRule 'Microsoft.ServiceBus/namespaces/AuthorizationRules@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: 'WorkflowServiceAccessKey'
  properties: {
    rights: [
      'Listen'
      'Send'
    ]
  }
}

// ============================================================================
// OUTPUTS
// ============================================================================

output servicesConfig object = {
  cosmosDb: {
    accountName: cosmosDbAccount.name
    endpoint: cosmosDbAccount.properties.documentEndpoint
    primaryKey: cosmosDbAccount.listKeys().primaryMasterKey
    connectionString: 'AccountEndpoint=${cosmosDbAccount.properties.documentEndpoint};AccountKey=${cosmosDbAccount.listKeys().primaryMasterKey};'
  }
  packageCosmosDb: {
    accountName: packageCosmosDb.name
    endpoint: packageCosmosDb.properties.documentEndpoint
    connectionString: packageCosmosDb.listConnectionStrings().connectionStrings[0].connectionString
  }
  redisCache: {
    name: deliveryRedisCache.name
    hostName: deliveryRedisCache.properties.hostName
    port: deliveryRedisCache.properties.port
    sslPort: deliveryRedisCache.properties.sslPort
    primaryKey: deliveryRedisCache.listKeys().primaryKey
    connectionString: '${deliveryRedisCache.properties.hostName}:${deliveryRedisCache.properties.sslPort},password=${deliveryRedisCache.listKeys().primaryKey},ssl=True,abortConnect=False'
  }
  serviceBus: {
    namespaceName: serviceBusNamespace.name
    endpoint: 'https://${serviceBusNamespace.name}.servicebus.windows.net/'
    queueName: serviceBusQueue.name
    ingestionConnectionString: serviceBusListenRule.listKeys().primaryConnectionString
    workflowConnectionString: serviceBusSendRule.listKeys().primaryConnectionString
  }
}

// Individual service outputs for reference
output cosmosDbAccountName string = cosmosDbAccount.name
output cosmosDbEndpoint string = cosmosDbAccount.properties.documentEndpoint
output packageCosmosDbName string = packageCosmosDb.name
output redisName string = deliveryRedisCache.name
output serviceBusNamespaceName string = serviceBusNamespace.name
