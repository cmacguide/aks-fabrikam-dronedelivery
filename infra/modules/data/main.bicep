// Generated by Copilot
// Data services module - Cosmos DB, Redis Cache, Service Bus
targetScope = 'resourceGroup'

// ============================================================================
// PARAMETERS
// ============================================================================

@description('Primary deployment location')
param location string = resourceGroup().location
@description('Secondary location for geo-redundancy')
param geoRedundancyLocation string
@description('Environment name (dev, staging, prod)')
param environmentName string
@description('Resource prefix identifier for resource naming')
param resourceSufix string
@description('Consistence Level for Cosmos DB')
param dbConsistencyLevel string
@description('Replication Level for Cosmos DB')
param dbMaxIntervalInSeconds int
@description('Staleness Level for Cosmos DB')
param dbMaxStalenessPrefix int
@description('Write location enable Cosmos DB')
param dbEnableMultipleWriteLocations bool
@description('Redis SKU')
param redisSku string
@description('Redis Family')
param redisFamily string
@description('Redis Capacity')
param redisCapacity int
@description('Service Bus SKU')
param sBusSku string
@description('Service Bus Tier')
param sBusTier string

@description('Resource tags')
param tags object = {}

// ============================================================================
// VARIABLES
// ============================================================================

var cosmosDbAccountName = 'cosmos-${resourceSufix}'
var packageCosmosDbName = 'cosmon-package-${resourceSufix}'
var deliveryRedisName = 'redis-delivery-${resourceSufix}'
var serviceBusNamespaceName = 'sbns-ingest-${resourceSufix}'
var serviceBusQueueName = 'sb-ingest-${resourceSufix}'

// ============================================================================
// COSMOS DB ACCOUNTS
// ============================================================================

// Main Cosmos DB account for delivery and drone scheduler services
resource cosmosDbAccount 'Microsoft.DocumentDB/databaseAccounts@2023-09-15' = {
  name: cosmosDbAccountName
  location: location
  tags: union(tags, { 'azd-service-name': 'CosmosDB' })
  kind: 'GlobalDocumentDB'
  properties: {
    consistencyPolicy: {
      defaultConsistencyLevel: dbConsistencyLevel
      maxIntervalInSeconds: dbMaxIntervalInSeconds
      maxStalenessPrefix: dbMaxStalenessPrefix
    }
    locations: environmentName == 'dev'
      ? [
          {
            locationName: location
            failoverPriority: 0
            isZoneRedundant: false
          }
        ]
      : [
          {
            locationName: location
            failoverPriority: 0
            isZoneRedundant: true
          }
          {
            locationName: geoRedundancyLocation
            failoverPriority: 1
            isZoneRedundant: true
          }
        ]
    databaseAccountOfferType: 'Standard'
    enableMultipleWriteLocations: dbEnableMultipleWriteLocations
    isVirtualNetworkFilterEnabled: false
    virtualNetworkRules: []
    disableKeyBasedMetadataWriteAccess: false
    enableFreeTier: environmentName == 'dev'
    enableAutomaticFailover: environmentName != 'dev'
    capabilities: []
    ipRules: []
  }
}

// MongoDB API Cosmos DB for package service
resource packageCosmosDb 'Microsoft.DocumentDB/databaseAccounts@2023-09-15' = {
  name: packageCosmosDbName
  location: location
  tags: union(tags, { 'azd-service-name': 'Package-CosmosDB' })
  kind: 'MongoDB'
  properties: {
    consistencyPolicy: {
      defaultConsistencyLevel: dbConsistencyLevel
      maxIntervalInSeconds: dbMaxIntervalInSeconds
      maxStalenessPrefix: dbMaxStalenessPrefix
    }
    locations: [
      {
        locationName: location
        failoverPriority: 0
        isZoneRedundant: environmentName != 'dev'
      }
    ]
    databaseAccountOfferType: 'Standard'
    apiProperties: {
      serverVersion: '4.2'
    }
    isVirtualNetworkFilterEnabled: false
    virtualNetworkRules: []
    disableKeyBasedMetadataWriteAccess: false
    enableFreeTier: false
    enableAutomaticFailover: environmentName != 'dev'
    capabilities: [
      {
        name: 'EnableMongo'
      }
    ]
    ipRules: []
  }
}

// ============================================================================
// REDIS CACHE
// ============================================================================

resource deliveryRedisCache 'Microsoft.Cache/redis@2023-08-01' = {
  name: deliveryRedisName
  location: location
  tags: union(tags, { 'azd-service-name': 'Delivery-Redis' })
  properties: {
    sku: {
      name: redisSku
      family: redisFamily
      capacity: redisCapacity
    }
    enableNonSslPort: false
    minimumTlsVersion: '1.2'
    redisConfiguration: {
      'maxmemory-policy': 'allkeys-lru'
    }
    redisVersion: '6'
    publicNetworkAccess: 'Enabled'
  }
}

// ============================================================================
// SERVICE BUS
// ============================================================================

resource serviceBusNamespace 'Microsoft.ServiceBus/namespaces@2022-10-01-preview' = {
  name: serviceBusNamespaceName
  location: location
  tags: union(tags, { 'azd-service-name': 'Ingestion-ServiceBus' })
  sku: {
    name: sBusSku
    tier: sBusTier
  }
  properties: {
    minimumTlsVersion: '1.2'
    publicNetworkAccess: 'Enabled'
    disableLocalAuth: false
    zoneRedundant: environmentName == 'prod'
  }
}

resource serviceBusQueue 'Microsoft.ServiceBus/namespaces/queues@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: serviceBusQueueName
  properties: union(
    {
      lockDuration: 'PT1M'
      maxSizeInMegabytes: 1024
      requiresDuplicateDetection: false
      requiresSession: false
      defaultMessageTimeToLive: 'P14D'
      deadLetteringOnMessageExpiration: true
      duplicateDetectionHistoryTimeWindow: 'PT10M'
      maxDeliveryCount: 10
      enablePartitioning: false
      enableExpress: false
    },
    sBusTier != 'Basic'
      ? {
          autoDeleteOnIdle: 'P10675199DT2H48M5.4775807S'
        }
      : {}
  )
}

// Service Bus authorization rules
resource serviceBusListenRule 'Microsoft.ServiceBus/namespaces/AuthorizationRules@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: 'IngestionServiceAccessKey'
  properties: {
    rights: [
      'Listen'
      'Send'
    ]
  }
}

resource serviceBusSendRule 'Microsoft.ServiceBus/namespaces/AuthorizationRules@2022-10-01-preview' = {
  parent: serviceBusNamespace
  name: 'WorkflowServiceAccessKey'
  properties: {
    rights: [
      'Listen'
      'Send'
    ]
  }
}

// ============================================================================
// OUTPUTS
// ============================================================================

output servicesConfig object = {
  cosmosDb: {
    accountName: cosmosDbAccount.name
    endpoint: cosmosDbAccount.properties.documentEndpoint
    primaryKey: cosmosDbAccount.listKeys().primaryMasterKey
    connectionString: 'AccountEndpoint=${cosmosDbAccount.properties.documentEndpoint};AccountKey=${cosmosDbAccount.listKeys().primaryMasterKey};'
  }
  packageCosmosDb: {
    accountName: packageCosmosDb.name
    endpoint: packageCosmosDb.properties.documentEndpoint
    connectionString: packageCosmosDb.listConnectionStrings().connectionStrings[0].connectionString
  }
  redisCache: {
    name: deliveryRedisCache.name
    hostName: deliveryRedisCache.properties.hostName
    port: deliveryRedisCache.properties.port
    sslPort: deliveryRedisCache.properties.sslPort
    primaryKey: deliveryRedisCache.listKeys().primaryKey
    connectionString: '${deliveryRedisCache.properties.hostName}:${deliveryRedisCache.properties.sslPort},password=${deliveryRedisCache.listKeys().primaryKey},ssl=True,abortConnect=False'
  }
  serviceBus: {
    namespaceName: serviceBusNamespace.name
    endpoint: 'https://${serviceBusNamespace.name}.servicebus.windows.net/'
    queueName: serviceBusQueue.name
    ingestionConnectionString: serviceBusListenRule.listKeys().primaryConnectionString
    workflowConnectionString: serviceBusSendRule.listKeys().primaryConnectionString
  }
}

// Individual service outputs for reference
output cosmosDbAccountName string = cosmosDbAccount.name
output cosmosDbEndpoint string = cosmosDbAccount.properties.documentEndpoint
output packageCosmosDbName string = packageCosmosDb.name
output redisName string = deliveryRedisCache.name
output serviceBusNamespaceName string = serviceBusNamespace.name
