// Generated by Copilot
// Main Bicep template for Fabrikam Drone Delivery AKS modernized deployment
// This template orchestrates all infrastructure components using modular design

targetScope = 'subscription'

// ============================================================================
// PARAMETERS
// ============================================================================
@description('Environment name (dev, staging, prod)')
@allowed(['dev', 'staging', 'prod'])
param environmentName string 

@description('Primary Azure region for deployment')
param location string

@description('Secondary region for geo-redundant services')
param geoRedundancyLocation string

@description('Tenant ID for Azure AD integration')
param k8sRbacEntraProfileTenantId string

@description('Kubernetes version for AKS cluster')
param kubernetesVersion string 

@description('Node Count for AKS Node System')
param aksSystemNodeCount int 

@description('Node Count for AKS User Node Pool')
param aksUserNodeCount int 

@description('VM size for AKS nodes')
param aksNodeSize string

@description('Enable auto-scaling for AKS node pools')
param aksEnableAutoScaling bool

@description('Minimum node count for auto-scaling')
param aksMinCount int

@description('Maximum node count for auto-scaling')
param aksMaxCount int

@description('AKS service CIDR range')
param aksServiceCidr string

@description('AKS DNS service IP address')
param aksDnsServiceIP string

@description('Load balancer SKU for AKS')
@allowed(['Basic', 'Standard'])
param aksLoadBalancerSku string

@description('Object ID of the Azure AD group that will have admin access to AKS')
param k8sRbacEntraAdminGroupObjectID string

@description('Domain name for the application (e.g., fabrikam.com)')
param domainName string

@description('Application name prefix for resource naming')
param appName string

@description('Sku for Azure Container registry')
param acrSku string

@description('Tags to be applied to all resources')
param tags object = {
  Environment: environmentName
  Application: 'Fabrikam Drone Delivery'
  'Cost Center': 'Engineering'
  Owner: 'Platform Team'
  'Deployment Method': 'Azure Developer CLI'
}

// ============================================================================
// VARIABLES
// ============================================================================

var uniqueId = uniqueString(subscription().subscriptionId, location, environmentName)
var resourcePrefix = '${appName}-${environmentName}-${uniqueId}'

var resourceGroupNames = {
  networking: 'rg-${resourcePrefix}-networking'
  compute: 'rg-${resourcePrefix}-compute'
  data: 'rg-${resourcePrefix}-data'
  security: 'rg-${resourcePrefix}-security'
  container: 'rg-${resourcePrefix}-container'
}

// ============================================================================
// RESOURCE GROUPS
// ============================================================================

resource networkingRG 'Microsoft.Resources/resourceGroups@2023-07-01' = {
  name: resourceGroupNames.networking
  location: location
  tags: tags
}

resource computeRG 'Microsoft.Resources/resourceGroups@2023-07-01' = {
  name: resourceGroupNames.compute
  location: location
  tags: tags
}

resource dataRG 'Microsoft.Resources/resourceGroups@2023-07-01' = {
  name: resourceGroupNames.data
  location: location
  tags: tags
}

resource securityRG 'Microsoft.Resources/resourceGroups@2023-07-01' = {
  name: resourceGroupNames.security
  location: location
  tags: tags
}

resource containerRG 'Microsoft.Resources/resourceGroups@2023-07-01' = {
  name: resourceGroupNames.container
  location: location
  tags: tags
}

// ============================================================================
// NETWORKING MODULE
// ============================================================================

module networking 'modules/networking/main.bicep' = {
  name: 'networking-deployment'
  scope: networkingRG
  params: {
    location: location
    uniqueId: uniqueId
    tags: tags
  }
}

// ============================================================================
// SECURITY MODULE (Key Vault, Managed Identities, Certificates)
// ============================================================================

module security 'modules/security/main.bicep' = {
  name: 'security-deployment'
  scope: securityRG
  params: {
    location: location
    environmentName: environmentName
    uniqueId: uniqueId
    domainName: domainName
    tags: tags
  }
}

// ============================================================================
// CONTAINER REGISTRY MODULE
// ============================================================================

module containerRegistry 'modules/container/acr.bicep' = {
  name: 'container-registry-deployment'
  scope: containerRG
  params: {
    acrSku: acrSku
    location: location
    uniqueId: uniqueId
    tags: tags
  }
}

// ============================================================================
// DATA SERVICES MODULE (Cosmos DB, Redis, Service Bus)
// ============================================================================

module dataServices 'modules/data/main.bicep' = {
  name: 'data-services-deployment'
  scope: dataRG
  params: {
    location: location
    geoRedundancyLocation: geoRedundancyLocation
    environmentName: environmentName
    uniqueId: uniqueId
    tags: tags
  }
}

// ============================================================================
// OBSERVABILITY MODULE (Application Insights)
// ============================================================================

module observability 'modules/observability/main.bicep' = {
  name: 'observability-deployment'
  scope: computeRG
  params: {
    location: location
    environmentName: environmentName
    uniqueId: uniqueId
    tags: tags
  }
}

// ============================================================================
// AKS CLUSTER MODULE
// ============================================================================

module aksCluster 'modules/compute/aks-cluster.bicep' = {
  name: 'aks-cluster-deployment'
  scope: computeRG
  params: {
    location: location
    environmentName: environmentName
    uniqueId: uniqueId
    kubernetesVersion: kubernetesVersion
    aksSystemNodeCount: aksSystemNodeCount
    aksUserNodeCount: aksUserNodeCount    
    aksNodeSize:aksNodeSize
    k8sRbacEntraAdminGroupObjectID: k8sRbacEntraAdminGroupObjectID
    k8sRbacEntraProfileTenantId: k8sRbacEntraProfileTenantId
    vnetResourceId: networking.outputs.spokeVnetId
    subnetResourceId: networking.outputs.aksSubnetId
    containerRegistryId: containerRegistry.outputs.registryId
    keyVaultId: security.outputs.keyVaultId
    logAnalyticsWorkspaceId: observability.outputs.logAnalyticsWorkspaceId
    aksServiceCidr:aksServiceCidr
    aksDnsServiceIP:aksDnsServiceIP
    aksEnableAutoScaling:aksEnableAutoScaling
    aksLoadBalancerSku:aksLoadBalancerSku
    aksMaxCount:aksMaxCount
    aksMinCount:aksMinCount    
    tags: tags
  }
}

// ============================================================================
// WORKLOAD MODULE (Microservices deployment)
// ============================================================================

// TODO: Deploy workloads after infrastructure is complete
// module workload 'modules/workload/main.bicep' = {
//   name: 'workload-deployment'
//   scope: computeRG
//   params: {
//     aksClusterName: aksCluster.outputs.clusterName
//     containerRegistryName: containerRegistry.outputs.registryName
//   }
// }

// ============================================================================
// OUTPUTS
// ============================================================================

// Required outputs for Azure Developer CLI
output AZURE_LOCATION string = location
output AZURE_TENANT_ID string = tenant().tenantId
output AZURE_RESOURCE_GROUP string = computeRG.name
output RESOURCE_GROUP_ID string = computeRG.id
output KUBERNETES_VERSION string = kubernetesVersion
output AKS_CLUSTER_NAME string = aksCluster.outputs.clusterName

// Resource group information
output resourceGroupNames object = resourceGroupNames
output aksClusterName string = aksCluster.outputs.clusterName
output containerRegistryName string = containerRegistry.outputs.registryName
output keyVaultName string = security.outputs.keyVaultName
output applicationGatewayFqdn string = networking.outputs.applicationGatewayFqdn
output aksClusterFqdn string = aksCluster.outputs.clusterFqdn

// Application Insights outputs
output applicationInsightsId string = observability.outputs.applicationInsightsId
output applicationInsightsName string = observability.outputs.applicationInsightsName
output applicationInsightsInstrumentationKey string = observability.outputs.instrumentationKey
output applicationInsightsConnectionString string = observability.outputs.connectionString

// Application endpoints
output endpoints object = {
  applicationGateway: networking.outputs.applicationGatewayFqdn
  aksCluster: aksCluster.outputs.clusterFqdn
  containerRegistry: containerRegistry.outputs.registryLoginServer
  keyVault: security.outputs.keyVaultUri
  applicationInsights: observability.outputs.applicationInsightsName
}

// Connection information for troubleshooting
output connectionInfo object = {
  aksGetCredentials: 'az aks get-credentials --name ${aksCluster.outputs.clusterName} --resource-group ${resourceGroupNames.compute}'
  acrLogin: 'az acr login --name ${containerRegistry.outputs.registryName}'
  keyVaultAccess: 'az keyvault show --name ${security.outputs.keyVaultName}'
  applicationInsights: 'az monitor app-insights show --app ${observability.outputs.applicationInsightsName} --resource-group ${resourceGroupNames.compute}'
}
