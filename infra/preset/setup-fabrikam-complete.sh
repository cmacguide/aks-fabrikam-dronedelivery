#!/bin/zsh
# Generated by Copilot
# Script para configurar todas as vari√°veis necess√°rias do projeto Fabrikam Drone Delivery
if [ -z "$ZSH_VERSION" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è Este script foi otimizado para Zsh, mas pode funcionar em outras shells.${NC}"
fi
if ! command -v azd &>/dev/null; then
  echo -e "${RED}‚ùå O Azure Developer CLI (azd) n√£o est√° instalado!${NC}"
  exit 1
fi
# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}=================================================="
echo -e "  üöÅ Fabrikam Drone Delivery - Setup Completo"
echo -e "==================================================${NC}"
echo ""

# Mostra vari√°veis atuais
echo -e "${BLUE}üìã Vari√°veis atuais:${NC}"
azd env get-values
echo ""
#carrega um ambiente especifico (dev, hml,prd)
environmentName=$(azd env get-values | grep "environmentName=" | cut -d '=' -f2 | tr -d '"')
if [[ -z "$environmentName" ]]; then
  echo -e "${RED}‚ùå Vari√°vel environmentName n√£o definida no azd!${NC}"
  exit 1
fi
envFile="infra/preset/.env.$environmentName"
if [[ ! -f "$envFile" ]]; then
  echo -e "${RED}‚ùå Arquivo .env n√£o encontrado: $envFile${NC}"
  exit 1
else
  source "$envFile"
  echo -e "${GREEN}‚úÖ Arquivo .env carregado!${NC}"
fi

# Fun√ß√£o para definir vari√°vel com feedback
set_variable() {
  local name=$1
  local value=$2
  local description=$3
  echo -e "${BLUE}üìù Definindo $name...${NC}"
  if azd env set "$name" "$value"; then
    echo -e "${GREEN}  ‚úÖ $description${NC}"
  else
    echo -e "${RED}  ‚ùå Erro ao definir $name${NC}"
    return 1
  fi
}
# normalizacao booleano
# normalize_boolean() {
#     local value=$1
#     local var_name=$2
#     # Remove aspas e converte para min√∫sculo
#     value=$(echo "$value" | sed 's/^["'\'']*//;s/["'\'']*$//' | tr '[:upper:]' '[:lower:]' | tr -d ' ')
#     case "$value" in
#         "true"|"1"|"yes"|"on"|"enabled")
#             echo "true"
#             ;;
#         "false"|"0"|"no"|"off"|"disabled"|"")
#             echo "false"
#             ;;
#         *)
#             echo -e "${YELLOW}‚ö†Ô∏è Valor inv√°lido para $var_name: '$value'. Usando 'false' como padr√£o.${NC}" >&2
#             echo "false"
#             ;;
#     esac
# }
# Fun√ß√£o para validar e corrigir vari√°veis booleanas do .env
# validate_and_fix_boolean_vars() {
#     echo -e "${BLUE}üîç Validando e corrigindo vari√°veis booleanas...${NC}"

# Lista de vari√°veis que devem ser booleanas
#     local boolean_vars=(
#         "aksEnableAutoScaling"
#         "enableMonitoring"
#         "enableRbac"
#         "enableNetworkPolicy"
#     )

#     for var in "${boolean_vars[@]}"; do
#         local current_value=$(eval echo \$$var 2>/dev/null || echo "")

#         if [[ -n "$current_value" ]]; then
#             local normalized_value=$(normalize_boolean "$current_value" "$var")

#             if [[ "$current_value" != "$normalized_value" ]]; then
#                 echo -e "${YELLOW}‚ö†Ô∏è Corrigindo $var: '$current_value' ‚Üí '$normalized_value'${NC}"
#                 eval "$var='$normalized_value'"
#             else
#                 echo -e "${GREEN}  ‚úÖ $var: $normalized_value${NC}"
#             fi
#         else
#             echo -e "${YELLOW}‚ö†Ô∏è $var n√£o definida, usando 'false'${NC}"
#             eval "$var='false'"
#         fi
#     done
# }
# Fun√ß√£o para definir vari√°vel booleana
# set_boolean_var() {
#     local name=$1
#     local value=$2
#     local description=$3

#     # Normaliza o valor booleano
#     local normalized_value=$(normalize_boolean "$value" "$name")

#     echo -e "${BLUE}üìù Definindo $name como booleano...${NC}"
#     if azd env set "$name" "$normalized_value"; then
#         echo -e "${GREEN}  ‚úÖ $description: $normalized_value${NC}"
#     else
#         echo -e "${RED}  ‚ùå Erro ao definir $name${NC}"
#         return 1
#     fi
# }

echo -e "${BLUE}üîß Configurando vari√°veis do projeto Fabrikam Drone Delivery...${NC}"
echo ""

# Vari√°veis b√°sicas do projeto
setup_fabrikam_preset() {
  # Configura√ß√µes Gerais do Projeto
  set_variable "environmentName" $ENVIRONMENT_NAME
  set_variable "sufix" $SUFIX
  set_variable "location" $AZURE_LOCATION
  set_variable "geoRedundancyLocation" $GEO_REDUNDANCY_LOCATION
  set_variable "azureTenantId" $AZURE_TENANT_ID
  set_variable "azureSubscriptionId" $AZURE_SUBSCRIPTION_ID
  set_variable "domainName" $DOMAIN_NAME
  # Configura√ß√µes espec√≠ficas do AKS
  set_variable "kubernetesVersion" $KUBERNETES_VERSION
  set_variable "k8sRbacEntraProfileTenantId" $K8S_RBAC_ENTRA_PROFILE_TENANT_ID
  set_variable "k8sRbacEntraAdminGroupObjectID" $K8S_RBAC_ENTRA_ADMIN_GROUP_OBJECT_ID "Grupo de Gerenciamento do AKS"
  set_variable "aksSystemNodeCount" $AKS_SYSTEM_NODE_COUNT "N√∫mero de n√≥s do AKS - System"
  set_variable "aksUserNodeCount" $AKS_USER_NODE_COUNT "N√∫mero de n√≥s do AKS - User"
  set_variable "aksNodeSize" $AKS_NODE_SIZE "Tamanho dos n√≥s do AKS"
  set_variable "aksEnableAutoScaling" $AKS_ENABLE_AUTO_SCALING "Auto scaling habilitado"
  set_variable "aksMinCount" $AKS_MIN_COUNT "M√≠nimo de n√≥s"
  set_variable "aksMaxCount" $AKS_MAX_COUNT "M√°ximo de n√≥s"
  set_variable "aksServiceCidr" $AKS_SERVICE_CIDR
  set_variable "aksDnsServiceIP" $AKS_DNS_SERVICE_IP
  set_variable "aksLoadBalancerSku" $AKS_LOAD_BALANCER_SKU
  # Configura√ß√µes de aplica√ß√£o
  set_variable "appName" $APP_NAME "Nome da aplica√ß√£o"
  set_variable "appVersion" $APP_VERSION "Vers√£o da aplica√ß√£o"
  # Configura√ß√µes de monitoramento
  set_variable "enableMonitoring" $ENABLE_MONITORING "Monitoramento habilitado"
  set_variable "logLevel" $LOG_LEVEL "N√≠vel de log"
  # Configura√ß√µes de seguran√ßa
  set_variable "enableRbac" $ENABLE_RBAC "RBAC habilitado"
  set_variable "enableNetworkPolicy" $ENABLE_NETWORK_POLICY "Network Policy habilitado"
  # Configura√ß√µes ACR
  set_variable "acrSku" $ACR_SKU "SKU do Azure Container Resgistry"
  # Configura√ß√µes Tier Data
  set_variable "dbConsistencyLevel" $DB_CONSISTENCY_LEVEL
  set_variable "dbMaxIntervalInSeconds" $DB_MAX_INTERVAL_IN_SECONDS
  set_variable "dbMaxStalenessPrefix" $DB_MAX_STALENESS_PREFIX
  set_variable "dbEnableMultipleWriteLocations" $DB_ENABLE_MULTIPLE_WRITE_LOCATIONS
  set_variable "redisSku" $REDIS_SKU
  set_variable "redisFamily" $REDIS_FAMILY
  set_variable "redisCapacity" $REDIS_CAPACITY
  set_variable "sBusSku" $SBUS_SKU
  set_variable "sBusTier" $SBUS_TIER
  # Configura√ß√µes de Network
  set_variable "hubVnetAddressPrefix" $HUB_VNET_ADDRESS_PREFIX
  set_variable "spokeVnetAddressPrefix" $SPOKE_VNET_ADDRESS_PREFIX
  set_variable "gatewaySubnetPrefix" $GATEWAY_SUBNET_PREFIX
  set_variable "azureFirewallSubnetPrefix" $AZURE_FIREWALL_SUBNET_PREFIX
  set_variable "bastionSubnetPrefix" $BASTION_SUBNET_PREFIX
  set_variable "hubNodePoolSubnetPrefix" $HUB_NODE_POOL_SUBNET_PREFIX
  set_variable "aksSystemSubnetPrefix" $AKS_SYSTEM_SUBNET_PREFIX
  set_variable "aksUserSubnetPrefix" $AKS_USER_SUBNET_PREFIX
  set_variable "applicationGatewaySubnetPrefix" $APPLICATION_GATEWAY_SUBNET_PREFIX
  set_variable "privateEndpointsSubnetPrefix" $PRIVATE_ENDPOINT_SUBNET_PREFIX
  # Configura√ß√µes de Observabilidade
  set_variable "logAnalyticsWorkspaceSku" $LOG_ANALYTICS_WORKSPACE_SKU
  # Configura√ß√µes Azure j√° existentes (verificamos se precisam ser atualizadas)
  existing_location=$(azd env get-value "location" 2>/dev/null || echo "")
  if [[ "$existing_location" != $AZURE_LOCATION ]]; then
    set_variable "location" $AZURE_LOCATION "Localiza√ß√£o do Azure"
  fi
  echo ""
  echo -e "${GREEN}üéâ Configura√ß√£o completa!${NC}"
  echo ""
}
make_main_params() {
  local azdEnvValues
  azdEnvValues=$(azd env get-values --output json)
  local paramsFile="infra/main.parameters.json"

  # Garante que o diret√≥rio existe e √© grav√°vel
  mkdir -p infra

  # Gera o arquivo de par√¢metros
  echo '{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {' >"$paramsFile"

  echo "$azdEnvValues" | jq -r 'to_entries | .[] | "    \"" + .key + "\": {\n      \"value\": \"" + .value + "\"\n    },"' >>"$paramsFile"

  # Remove a √∫ltima v√≠rgula (compat√≠vel com Linux e Mac)
  if [[ "$(uname)" == "Darwin" ]]; then
    sed -i '' '$ s/,$//' "$paramsFile"
  else
    sed -i '$ s/,$//' "$paramsFile"
  fi

  echo '  }
}' >>"$paramsFile"

  echo -e "${GREEN}‚úÖ Arquivo main.parameters.json gerado com sucesso!${NC}"
}
# Menu principal
echo "Escolha uma op√ß√£o:"
echo "1. Definir vari√°vel manualmente"
echo "2. Aplicar preset Fabrikam"
echo "3. Gerar Arquivo de Par√¢metros Bicep"
echo "4. Sair"

read "opcao?Op√ß√£o (1-3): "

case $opcao in
1)
  read "var_name?Nome da vari√°vel: "
  read "var_value?Valor da vari√°vel: "

  if [[ -n "$var_name" && -n "$var_value" ]]; then
    set_variable "$var_name" "$var_value"
  else
    echo -e "${YELLOW}‚ö†Ô∏è Nome e valor s√£o obrigat√≥rios!${NC}"
  fi
  ;;
2)
  setup_fabrikam_preset
  ;;
3)
  make_main_params
  ;;
4)
  echo -e "${GREEN}üëã Saindo...${NC}"
  exit 0
  ;;
*)
  echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
  ;;
esac

echo ""
echo -e "${CYAN}üìã Resumo das vari√°veis configuradas:${NC}"
azd env get-values | sort
echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos passos:${NC}"
echo "1. Execute: azd up (para fazer deploy completo)"
echo "2. Ou execute: azd provision (apenas infraestrutura)"
echo "3. Execute: azd deploy (apenas aplica√ß√µes)"
echo ""
