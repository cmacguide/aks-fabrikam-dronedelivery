#!/bin/zsh
# Generated by Copilot
# Script para configurar todas as vari√°veis necess√°rias do projeto Fabrikam Drone Delivery
if [ -z "$ZSH_VERSION" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Este script foi otimizado para Zsh, mas pode funcionar em outras shells.${NC}"
fi
if ! command -v azd &> /dev/null; then
    echo -e "${RED}‚ùå O Azure Developer CLI (azd) n√£o est√° instalado!${NC}"
    exit 1
fi
# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}=================================================="
echo -e "  üöÅ Fabrikam Drone Delivery - Setup Completo"
echo -e "==================================================${NC}"
echo ""
environmentName=$(azd env get-values | grep "environmentName=" | cut -d '=' -f2 | tr -d '"')
if [[ -z "$environmentName" ]]; then
    echo -e "${RED}‚ùå Vari√°vel environmentName n√£o definida no azd!${NC}"
    exit 1
fi
envFile="infra/preset/.env.$environmentName"
if [[ ! -f "$envFile" ]]; then
    echo -e "${RED}‚ùå Arquivo .env n√£o encontrado: $envFile${NC}"
    exit 1
else
    source "$envFile"
    echo -e "${GREEN}‚úÖ Arquivo .env carregado!${NC}"
fi
# Fun√ß√£o para definir vari√°vel com feedback
set_var() {
    local name=$1
    local value=$2
    local description=$3
    
    echo -e "${BLUE}üìù Definindo $name...${NC}"
    if azd env set "$name" "$value"; then
        echo -e "${GREEN}  ‚úÖ $description${NC}"
    else
        echo -e "${RED}  ‚ùå Erro ao definir $name${NC}"
        return 1
    fi
}
# normalizacao booleano
normalize_boolean() {
    local value=$1
    local var_name=$2
    
    # Converte para min√∫sculo e remove espa√ßos
    value=$(echo "$value" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
    
    case "$value" in
        "true"|"1"|"yes"|"on"|"enabled")
            echo "true"
            ;;
        "false"|"0"|"no"|"off"|"disabled"|"")
            echo "false"
            ;;
        *)
            echo -e "${YELLOW}‚ö†Ô∏è Valor inv√°lido para $var_name: '$value'. Usando 'false' como padr√£o.${NC}"
            echo "false"
            ;;
    esac
}

# Fun√ß√£o para definir vari√°vel booleana
set_boolean_var() {
    local name=$1
    local value=$2
    local description=$3
    
    # Normaliza o valor booleano
    local normalized_value=$(normalize_boolean "$value" "$name")
    
    echo -e "${BLUE}üìù Definindo $name como booleano...${NC}"
    if azd env set "$name" "$normalized_value"; then
        echo -e "${GREEN}  ‚úÖ $description: $normalized_value${NC}"
    else
        echo -e "${RED}  ‚ùå Erro ao definir $name${NC}"
        return 1
    fi
}

echo -e "${BLUE}üîß Configurando vari√°veis do projeto Fabrikam Drone Delivery...${NC}"
echo ""

# Vari√°veis b√°sicas do projeto
set_variable "environmentName" $ENVIRONMENT_NAME
    set_var "location" $AZURE_LOCATION
    set_var "geoRedundancyLocation" $GEO_REDUNDANCY_LOCATION 
    set_var "azureTenantId" $AZURE_TENANT_ID
    set_var "azureSubscriptionId" $AZURE_SUBSCRIPTION_ID
    set_var "appName" $APP_NAME
    set_var "domainName" $DOMAIN_NAME
    set_var "kubernetesVersion" $KUBERNETES_VERSION
    set_var "k8sRbacEntraProfileTenantId" $K8S_RBAC_ENTRA_PROFILE_TENANT_ID
    set_var "k8sRbacEntraAdminGroupObjectID" $K8S_RBAC_ENTRA_ADMIN_GROUP_OBJECT_ID

# Configura√ß√µes Azure j√° existentes (verificamos se precisam ser atualizadas)
existing_location=$(azd env get-value "location" 2>/dev/null || echo "")
if [[ "$existing_location" != $AZURE_LOCATION ]]; then
    set_var "location" $AZURE_LOCATION "Localiza√ß√£o do Azure"
fi

# Configura√ß√µes espec√≠ficas do AKS
set_var "aksSystemNodeCount" $AKS_SYSTEM_NODE_COUNT "N√∫mero de n√≥s do AKS - System"
set_var "aksUserNodeCount" $AKS_USER_NODE_COUNT "N√∫mero de n√≥s do AKS - User"
set_var "aksNodeSize" $AKS_NODE_SIZE "Tamanho dos n√≥s do AKS"
set_var "aksEnableAutoScaling" $AKS_ENABLE_AUTO_SCALING "Auto scaling habilitado"
set_var "aksMinCount" $AKS_MIN_COUNT "M√≠nimo de n√≥s"
set_var "aksMaxCount" $AKS_MAX_COUNT "M√°ximo de n√≥s"
set_var "aksServiceCidr" $AKS_SERVICE_CIDR
set_var "aksDnsServiceIP" $AKS_DNS_SERVICE_IP
set_var "aksLoadBalancerSku" $AKS_LOAD_BALANCER_SKU

# Configura√ß√µes de aplica√ß√£o
set_var "APP_NAME" $APP_NAME "Nome da aplica√ß√£o"
set_var "APP_VERSION" $APP_VERSION "Vers√£o da aplica√ß√£o"

# Configura√ß√µes de monitoramento
set_boolean_var "ENABLE_MONITORING" $ENABLE_MONITORING "Monitoramento habilitado"
set_var "LOG_LEVEL" $LOG_LEVEL "N√≠vel de log"

# Configura√ß√µes de seguran√ßa
set_boolean_var "ENABLE_RBAC" $ENABLE_RBAC "RBAC habilitado"
set_boolean_var "ENABLE_NETWORK_POLICY" $ENABLE_NETWORK_POLICY "Network Policy habilitado"

echo ""
echo -e "${GREEN}üéâ Configura√ß√£o completa!${NC}"
echo ""
echo -e "${CYAN}üìã Resumo das vari√°veis configuradas:${NC}"
azd env get-values | sort

echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos passos:${NC}"
echo "1. Execute: azd up (para fazer deploy completo)"
echo "2. Ou execute: azd provision (apenas infraestrutura)"
echo "3. Execute: azd deploy (apenas aplica√ß√µes)"
echo ""
