#!/bin/zsh
# Generated by Copilot
# Script para criar e configurar grupo Entra ID para AKS
# Arquivo: setup-entra-group.sh

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Função para log colorido
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Verificar se está logado no Azure
check_azure_login() {
    log "Verificando login no Azure..."
    
    if ! az account show &>/dev/null; then
        error "Você não está logado no Azure. Execute 'az login' primeiro."
        exit 1
    fi
    
    local tenant_id=$(az account show --query "tenantId" -o tsv)
    local user_name=$(az account show --query "user.name" -o tsv)
    
    success "Logado como: $user_name"
    success "Tenant: $tenant_id"
}

# Criar grupo Entra ID
create_entra_group() {
    local group_name="AKS-DroneDelivery-Admins"
    local group_nickname="aks-drone-admins"
    local group_description="Grupo para administradores do cluster AKS Drone Delivery"
    
    log "Verificando se o grupo já existe..."
    
    # Verificar se grupo já existe
    if az ad group show --group "$group_name" &>/dev/null; then
        warn "Grupo '$group_name' já existe!"
        local existing_group_id=$(az ad group show --group "$group_name" --query "id" -o tsv)
        echo "Group ID existente: $existing_group_id"
        return 0
    fi
    
    log "Criando novo grupo Entra ID..."
    
    # Criar grupo
    if az ad group create \
        --display-name "$group_name" \
        --mail-nickname "$group_nickname" \
        --description "$group_description" &>/dev/null; then
        
        success "Grupo criado com sucesso!"
        
        # Obter ID do grupo
        local group_id=$(az ad group show --group "$group_name" --query "id" -o tsv)
        success "Group ID: $group_id"
        
        # Salvar ID em arquivo temporário
        echo "$group_id" > /tmp/new_group_id.txt
        
        return 0
    else
        error "Falha ao criar o grupo"
        return 1
    fi
}

# Adicionar usuário ao grupo
add_user_to_group() {
    local group_name="AKS-DroneDelivery-Admins"
    
    log "Adicionando usuário atual ao grupo..."
    
    # Obter IDs
    local group_id=$(az ad group show --group "$group_name" --query "id" -o tsv)
    local user_id=$(az ad signed-in-user show --query "id" -o tsv)
    local user_name=$(az ad signed-in-user show --query "userPrincipalName" -o tsv)
    
    # Verificar se usuário já é membro
    if az ad group member check --group "$group_id" --member-id "$user_id" --query "value" -o tsv | grep -q "true"; then
        warn "Usuário $user_name já é membro do grupo"
        return 0
    fi
    
    # Adicionar usuário ao grupo
    if az ad group member add --group "$group_id" --member-id "$user_id" &>/dev/null; then
        success "Usuário $user_name adicionado ao grupo com sucesso!"
        return 0
    else
        error "Falha ao adicionar usuário ao grupo"
        return 1
    fi
}

# Atualizar arquivo RBAC
update_rbac_file() {
    local rbac_file="cluster-manifests/user-facing-cluster-role-entra-group.yaml"
    local group_name="AKS-DroneDelivery-Admins"
    
    log "Atualizando arquivo RBAC..."
    
    # Obter Group ID
    local group_id=$(az ad group show --group "$group_name" --query "id" -o tsv)
    
    if [[ ! -f "$rbac_file" ]]; then
        error "Arquivo RBAC não encontrado: $rbac_file"
        return 1
    fi
    
    # Criar backup
    cp "$rbac_file" "${rbac_file}.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Atualizar grupo ID no arquivo
    sed -i.tmp "s/name: 93ae7ed7-8077-4ed4-9947-ca3e991a253f/name: $group_id/g" "$rbac_file"
    rm "${rbac_file}.tmp" 2>/dev/null || true
    
    success "Arquivo RBAC atualizado com novo Group ID: $group_id"
}

# Atualizar parâmetros de deploy
update_deploy_parameters() {
    local params_file="azuredeploy.parameters.prod.json"
    local group_name="AKS-DroneDelivery-Admins"
    
    log "Atualizando parâmetros de deploy..."
    
    # Obter IDs
    local group_id=$(az ad group show --group "$group_name" --query "id" -o tsv)
    local tenant_id=$(az account show --query "tenantId" -o tsv)
    
    if [[ ! -f "$params_file" ]]; then
        error "Arquivo de parâmetros não encontrado: $params_file"
        return 1
    fi
    
    # Criar backup
    cp "$params_file" "${params_file}.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Criar arquivo temporário com as atualizações
    cat "$params_file" | \
    sed "s/\"k8sRbacEntraAdminGroupObjectID\": {[^}]*}/\"k8sRbacEntraAdminGroupObjectID\": {\n      \"value\": \"$group_id\"\n    }/g" | \
    sed "s/\"k8sRbacEntraProfileTenantId\": {[^}]*}/\"k8sRbacEntraProfileTenantId\": {\n      \"value\": \"$tenant_id\"\n    }/g" > "${params_file}.tmp"
    
    mv "${params_file}.tmp" "$params_file"
    
    success "Parâmetros de deploy atualizados:"
    success "  - Group ID: $group_id"
    success "  - Tenant ID: $tenant_id"
}

# Exibir informações finais
show_summary() {
    local group_name="AKS-DroneDelivery-Admins"
    
    echo ""
    echo "================================================="
    echo "  CONFIGURAÇÃO CONCLUÍDA"
    echo "================================================="
    echo ""
    
    # Informações do grupo
    local group_id=$(az ad group show --group "$group_name" --query "id" -o tsv)
    local tenant_id=$(az account show --query "tenantId" -o tsv)
    local user_name=$(az account show --query "user.name" -o tsv)
    
    success "Grupo Entra ID criado e configurado:"
    echo "  - Nome: $group_name"
    echo "  - ID: $group_id"
    echo "  - Tenant: $tenant_id"
    echo "  - Membro: $user_name"
    echo ""
    
    success "Arquivos atualizados:"
    echo "  - cluster-manifests/user-facing-cluster-role-entra-group.yaml"
    echo "  - azuredeploy.parameters.prod.json"
    echo ""
    
    success "Próximos passos:"
    echo "  1. Verificar se as configurações estão corretas"
    echo "  2. Fazer commit das alterações no Git"
    echo "  3. Re-deployar o template Bicep se necessário"
    echo "  4. Testar acesso ao cluster AKS"
    echo ""
    
    warn "IMPORTANTE:"
    echo "  - Backups dos arquivos originais foram criados"
    echo "  - Verifique os arquivos antes de fazer deploy em produção"
}

# Função principal
main() {
    echo "================================================="
    echo "  SETUP GRUPO ENTRA ID PARA AKS"
    echo "================================================="
    echo ""
    
    check_azure_login
    
    echo ""
    read -p "Deseja criar um novo grupo Entra ID? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        create_entra_group
        add_user_to_group
        update_rbac_file
        update_deploy_parameters
        show_summary
    else
        log "Operação cancelada pelo usuário"
        exit 0
    fi
}

# Verificar se script está sendo executado diretamente
if [[ "${(%):-%x}" == "${0}" ]]; then
    main "$@"
fi
