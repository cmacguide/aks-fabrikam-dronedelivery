#!/bin/bash
# Generated by Copilot

# Script para configurar Entra ID External para RBAC do AKS
# Arquivo: setup-entra-external-rbac.sh

set -euo pipefail

# Configurações
EXTERNAL_TENANT_ID="cdbba3b9-3344-40cd-9f2d-5a463efc272d"
PRINCIPAL_TENANT_ID="83d6df9e-eec5-4d37-be60-97bf712d85ab"
GROUP_NAME="dronedelivery-cluster-admin"
GROUP_NICKNAME="dronedelivery-admin"
GROUP_DESCRIPTION="Administradores do cluster AKS Drone Delivery via Entra ID External"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funções de log
log() { echo -e "${BLUE}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }

# Verificar dependências
check_dependencies() {
    log "Verificando dependências..."
    
    if ! command -v az &> /dev/null; then
        error "Azure CLI não encontrado. Instale: https://aka.ms/installazureclilinux"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        warn "jq não encontrado. Instalando..."
        sudo apt-get update && sudo apt-get install -y jq || {
            error "Falha ao instalar jq"
            exit 1
        }
    fi
    
    success "Dependências verificadas!"
}

# Função para login no tenant Entra ID External
login_external_tenant() {
    log "Fazendo login no tenant Entra ID External: $EXTERNAL_TENANT_ID"
    
    # Verificar se já está logado no tenant correto
    current_tenant=$(az account show --query "tenantId" -o tsv 2>/dev/null || echo "none")
    
    if [[ "$current_tenant" == "$EXTERNAL_TENANT_ID" ]]; then
        success "Já logado no tenant Entra ID External!"
        return 0
    fi
    
    log "Tentando login com device code..."
    if az login --use-device-code --tenant "$EXTERNAL_TENANT_ID" --allow-no-subscriptions; then
        success "Login realizado com sucesso no tenant Entra ID External!"
        return 0
    else
        error "Falha no login. Verifique suas credenciais."
        return 1
    fi
}

# Função para criar grupo no Entra ID External
create_entra_group() {
    log "Criando grupo '$GROUP_NAME' no tenant Entra ID External..."
    
    # Verificar se grupo já existe
    existing_group=$(az ad group list --filter "displayName eq '$GROUP_NAME'" --query "[0].id" -o tsv 2>/dev/null || echo "")
    
    if [[ -n "$existing_group" && "$existing_group" != "null" ]]; then
        warn "Grupo '$GROUP_NAME' já existe com ID: $existing_group"
        echo "$existing_group"
        return 0
    fi
    
    # Criar novo grupo
    group_id=$(az ad group create \
        --display-name "$GROUP_NAME" \
        --mail-nickname "$GROUP_NICKNAME" \
        --description "$GROUP_DESCRIPTION" \
        --query "id" -o tsv)
    
    if [[ -n "$group_id" ]]; then
        success "Grupo criado com sucesso!"
        success "Group Object ID: $group_id"
        echo "$group_id"
        return 0
    else
        error "Falha ao criar grupo"
        return 1
    fi
}

# Função para adicionar usuário atual ao grupo
add_current_user_to_group() {
    local group_id="$1"
    
    log "Adicionando usuário atual ao grupo..."
    
    # Obter ID do usuário atual
    current_user_id=$(az ad signed-in-user show --query "id" -o tsv 2>/dev/null || echo "")
    
    if [[ -z "$current_user_id" ]]; then
        warn "Não foi possível obter ID do usuário atual"
        return 1
    fi
    
    # Verificar se usuário já é membro
    is_member=$(az ad group member check --group "$group_id" --member-id "$current_user_id" --query "value" -o tsv 2>/dev/null || echo "false")
    
    if [[ "$is_member" == "true" ]]; then
        success "Usuário já é membro do grupo!"
        return 0
    fi
    
    # Adicionar usuário ao grupo
    if az ad group member add --group "$group_id" --member-id "$current_user_id" --output none; then
        success "Usuário adicionado ao grupo com sucesso!"
        return 0
    else
        error "Falha ao adicionar usuário ao grupo"
        return 1
    fi
}

# Função para exibir informações do grupo
show_group_info() {
    local group_id="$1"
    
    echo ""
    echo "=== INFORMAÇÕES DO GRUPO ==="
    az ad group show --group "$group_id" --query "{displayName:displayName, description:description, id:id, mailNickname:mailNickname}" --output table
    
    echo ""
    echo "=== MEMBROS DO GRUPO ==="
    az ad group member list --group "$group_id" --query "[].{displayName:displayName, userPrincipalName:userPrincipalName, id:id}" --output table
}

# Função para gerar configuração Bicep
generate_bicep_config() {
    local group_id="$1"
    
    echo ""
    echo "=== CONFIGURAÇÃO PARA BICEP ==="
    echo "Adicione as seguintes configurações ao seu template Bicep:"
    echo ""
    echo "// Parâmetros"
    echo "param k8sRbacEntraAdminGroupObjectID string = '$group_id'"
    echo "param k8sRbacEntraProfileTenantId string = '$EXTERNAL_TENANT_ID'"
    echo ""
    echo "// Configuração do AKS"
    echo "aadProfile: {"
    echo "  managed: true"
    echo "  enableAzureRBAC: false"
    echo "  adminGroupObjectIDs: ["
    echo "    k8sRbacEntraAdminGroupObjectID"
    echo "  ]"
    echo "  tenantID: k8sRbacEntraProfileTenantId"
    echo "}"
}

# Função para gerar arquivo de parâmetros
generate_parameters_file() {
    local group_id="$1"
    local params_file="azuredeploy.parameters.cross-tenant.json"
    
    log "Gerando arquivo de parâmetros: $params_file"
    
    cat > "$params_file" << EOF
{
  "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "k8sRbacEntraAdminGroupObjectID": {
      "value": "$group_id"
    },
    "k8sRbacEntraProfileTenantId": {
      "value": "$EXTERNAL_TENANT_ID"
    }
  }
}
EOF
    
    success "Arquivo de parâmetros criado: $params_file"
}

# Função para gerar script de deployment
generate_deployment_script() {
    local group_id="$1"
    local deploy_script="deploy-cross-tenant-aks.sh"
    
    log "Gerando script de deployment: $deploy_script"
    
    cat > "$deploy_script" << 'EOF'
#!/bin/bash
# Generated by Copilot
# Script para deploy do AKS com Cross-Tenant RBAC

set -euo pipefail

# Configurações
PRINCIPAL_TENANT_ID="83d6df9e-eec5-4d37-be60-97bf712d85ab"
RESOURCE_GROUP="[SEU_RESOURCE_GROUP]"
DEPLOYMENT_NAME="aks-cross-tenant-$(date +%Y%m%d-%H%M%S)"

# Login no tenant principal
echo "Fazendo login no tenant principal..."
az login --tenant $PRINCIPAL_TENANT_ID

# Selecionar subscription
echo "Selecionando subscription..."
az account set --subscription "[SUA_SUBSCRIPTION_ID]"

# Deploy do template
echo "Iniciando deployment..."
az deployment group create \
  --resource-group "$RESOURCE_GROUP" \
  --template-file cluster-stamp.bicep \
  --parameters @azuredeploy.parameters.cross-tenant.json \
  --name "$DEPLOYMENT_NAME" \
  --verbose

echo "Deployment concluído: $DEPLOYMENT_NAME"
EOF
    
    chmod +x "$deploy_script"
    success "Script de deployment criado: $deploy_script"
}

# Função principal
main() {
    echo "======================================================="
    echo "  CONFIGURAÇÃO ENTRA ID EXTERNAL PARA AKS RBAC"
    echo "======================================================="
    echo ""
    echo "Tenant Entra ID External: $EXTERNAL_TENANT_ID"
    echo "Tenant Principal (recursos): $PRINCIPAL_TENANT_ID"
    echo "Nome do grupo: $GROUP_NAME"
    echo ""
    
    # Verificar dependências
    check_dependencies
    
    # Login no tenant Entra ID External
    if ! login_external_tenant; then
        error "Falha no login. Abortando..."
        exit 1
    fi
    
    # Criar grupo
    group_id=$(create_entra_group)
    if [[ -z "$group_id" ]]; then
        error "Falha ao criar/obter grupo. Abortando..."
        exit 1
    fi
    
    # Adicionar usuário atual ao grupo
    add_current_user_to_group "$group_id"
    
    # Exibir informações do grupo
    show_group_info "$group_id"
    
    # Gerar configurações
    generate_bicep_config "$group_id"
    generate_parameters_file "$group_id"
    generate_deployment_script "$group_id"
    
    echo ""
    echo "======================================================="
    echo "  CONFIGURAÇÃO CONCLUÍDA COM SUCESSO!"
    echo "======================================================="
    echo ""
    echo "PRÓXIMOS PASSOS:"
    echo "1. Revise o arquivo 'azuredeploy.parameters.cross-tenant.json'"
    echo "2. Atualize as configurações no 'deploy-cross-tenant-aks.sh'"
    echo "3. Execute o deploy do AKS com as novas configurações"
    echo "4. Teste o acesso com usuários do Entra ID External"
    echo ""
    echo "Para adicionar mais usuários ao grupo:"
    echo "az ad group member add --group '$group_id' --member-id <USER_ID>"
    echo ""
    success "Group Object ID: $group_id"
}

# Verificar se script está sendo executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
