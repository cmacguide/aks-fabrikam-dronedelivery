# Generated by Copilot
# PowerShell Script para diagnosticar problemas de autenticação Entra ID External com AKS
# Arquivo: Diagnose-EntraExternal.ps1

param(
    [string]$TenantId = "",
    [string]$ResourceGroup = "",
    [string]$ClusterName = "",
    [switch]$Help
)

# Função para exibir ajuda
function Show-Help {
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host "  DIAGNÓSTICO ENTRA ID EXTERNAL - AKS" -ForegroundColor Cyan
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "USAGE:" -ForegroundColor Yellow
    Write-Host "  .\Diagnose-EntraExternal.ps1 [-TenantId <ID>] [-ResourceGroup <RG>] [-ClusterName <NAME>]" -ForegroundColor White
    Write-Host ""
    Write-Host "PARAMETERS:" -ForegroundColor Yellow
    Write-Host "  -TenantId       ID do tenant para login (opcional)" -ForegroundColor White
    Write-Host "  -ResourceGroup  Nome do Resource Group do AKS (opcional)" -ForegroundColor White
    Write-Host "  -ClusterName    Nome do cluster AKS (opcional)" -ForegroundColor White
    Write-Host "  -Help           Exibe esta ajuda" -ForegroundColor White
    Write-Host ""
    Write-Host "EXEMPLOS:" -ForegroundColor Yellow
    Write-Host "  .\Diagnose-EntraExternal.ps1" -ForegroundColor White
    Write-Host "  .\Diagnose-EntraExternal.ps1 -TenantId 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'" -ForegroundColor White
    Write-Host "  .\Diagnose-EntraExternal.ps1 -ResourceGroup 'rg-aks' -ClusterName 'aks-cluster'" -ForegroundColor White
    Write-Host ""
}

# Função para log colorido
function Write-Info { param([string]$Message) Write-Host "[INFO] $Message" -ForegroundColor Blue }
function Write-Warn { param([string]$Message) Write-Host "[WARN] $Message" -ForegroundColor Yellow }
function Write-Error { param([string]$Message) Write-Host "[ERROR] $Message" -ForegroundColor Red }
function Write-Success { param([string]$Message) Write-Host "[SUCCESS] $Message" -ForegroundColor Green }

# Verificar se help foi solicitado
if ($Help) {
    Show-Help
    exit 0
}

# Verificar dependências
function Test-Dependencies {
    Write-Info "Verificando dependências..."
    
    $commands = @("az", "kubectl")
    $missing = @()
    
    foreach ($cmd in $commands) {
        if (!(Get-Command $cmd -ErrorAction SilentlyContinue)) {
            $missing += $cmd
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-Error "Comandos não encontrados: $($missing -join ', ')"
        Write-Host "Por favor, instale as ferramentas necessárias:" -ForegroundColor Yellow
        Write-Host "- Azure CLI: https://aka.ms/installazurecliwindows" -ForegroundColor White
        Write-Host "- kubectl: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/" -ForegroundColor White
        exit 1
    }
    
    Write-Success "Todas as dependências estão instaladas!"
}

# Obter informações do tenant
function Get-TenantInfo {
    Write-Info "Obtendo informações dos tenants disponíveis..."
    
    Write-Host ""
    Write-Host "=== TENANTS DISPONÍVEIS ===" -ForegroundColor Cyan
    try {
        az account tenant list --output table
    }
    catch {
        Write-Warn "Não foi possível listar tenants. Você pode não estar logado."
    }
    
    Write-Host ""
    Write-Host "=== TENANT ATUAL ===" -ForegroundColor Cyan
    try {
        $currentTenant = az account show --query "tenantId" -o tsv 2>$null
        if ($currentTenant) {
            Write-Host "Tenant ID: $currentTenant" -ForegroundColor White
            $userName = az account show --query "user.name" -o tsv 2>$null
            if ($userName) {
                Write-Host "Usuário: $userName" -ForegroundColor White
            }
        } else {
            Write-Warn "Nenhum tenant ativo encontrado"
        }
    }
    catch {
        Write-Warn "Não foi possível obter informações do tenant atual"
    }
}

# Tentar login com tenant específico
function Try-LoginWithTenant {
    param([string]$Tenant)
    
    Write-Info "Tentando login com tenant: $Tenant"
    
    try {
        az login --tenant $Tenant --output none
        Write-Success "Login realizado com sucesso!"
        return $true
    }
    catch {
        Write-Error "Falha no login com tenant $Tenant"
        return $false
    }
}

# Verificar grupos do Entra ID
function Test-EntraGroups {
    $groupId = "93ae7ed7-8077-4ed4-9947-ca3e991a253f"
    
    Write-Info "Verificando grupo Entra ID: $groupId"
    
    try {
        az ad group show --group $groupId --output none 2>$null
        Write-Success "Grupo encontrado!"
        
        Write-Host ""
        Write-Host "=== INFORMAÇÕES DO GRUPO ===" -ForegroundColor Cyan
        az ad group show --group $groupId --query "{displayName:displayName, description:description, id:id}" --output table
        
        Write-Host ""
        Write-Host "=== MEMBROS DO GRUPO ===" -ForegroundColor Cyan
        az ad group member list --group $groupId --query "[].{displayName:displayName, userPrincipalName:userPrincipalName, id:id}" --output table
    }
    catch {
        Write-Error "Grupo não encontrado no tenant atual!"
        Write-Warn "Verifique se você está logado no tenant correto."
    }
}

# Verificar acesso ao AKS
function Test-AksAccess {
    param(
        [string]$ResourceGroup,
        [string]$ClusterName
    )
    
    if (-not $ResourceGroup -or -not $ClusterName) {
        Write-Warn "Resource Group ou Cluster Name não fornecidos. Pulando verificação do AKS."
        return
    }
    
    Write-Info "Verificando acesso ao cluster AKS: $ClusterName"
    
    try {
        az aks get-credentials --resource-group $ResourceGroup --name $ClusterName --overwrite-existing --output none
        Write-Success "Credenciais do AKS obtidas com sucesso!"
        
        Write-Host ""
        Write-Host "=== TESTE DE ACESSO AO CLUSTER ===" -ForegroundColor Cyan
        kubectl get nodes --output wide
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Acesso ao cluster AKS funcionando!"
        } else {
            Write-Error "Falha ao acessar o cluster AKS"
        }
        
        Write-Host ""
        Write-Host "=== VERIFICAÇÃO DE PERMISSÕES RBAC ===" -ForegroundColor Cyan
        kubectl auth can-i get nodes
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Permissão para listar nodes: OK"
        } else {
            Write-Warn "Permissão para listar nodes: NEGADA"
        }
        
        kubectl auth can-i get pods
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Permissão para listar pods: OK"
        } else {
            Write-Warn "Permissão para listar pods: NEGADA"
        }
        
        Write-Host ""
        Write-Host "=== IDENTIFICAÇÃO DO USUÁRIO ===" -ForegroundColor Cyan
        kubectl auth whoami 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Warn "Não foi possível identificar o usuário atual"
        }
    }
    catch {
        Write-Error "Falha ao obter credenciais do AKS"
    }
}

# Tentar diferentes métodos de login
function Try-DifferentLoginMethods {
    param([string]$Tenant)
    
    Write-Info "Tentando diferentes métodos de login para tenant: $Tenant"
    
    # Método 1: Login normal com tenant
    Write-Host ""
    Write-Host "=== MÉTODO 1: Login normal com tenant ===" -ForegroundColor Cyan
    if (Try-LoginWithTenant $Tenant) {
        return $true
    }
    
    # Método 2: Login com device code
    Write-Host ""
    Write-Host "=== MÉTODO 2: Login com device code ===" -ForegroundColor Cyan
    Write-Warn "Tentando login com device code..."
    try {
        az login --use-device-code --tenant $Tenant --output none
        Write-Success "Login com device code realizado com sucesso!"
        return $true
    }
    catch {
        Write-Error "Falha no login com device code"
    }
    
    # Método 3: Login interativo
    Write-Host ""
    Write-Host "=== MÉTODO 3: Login interativo ===" -ForegroundColor Cyan
    Write-Warn "Tentando login interativo..."
    try {
        az login --tenant $Tenant --output none
        Write-Success "Login interativo realizado com sucesso!"
        return $true
    }
    catch {
        Write-Error "Falha no login interativo"
    }
    
    return $false
}

# Função principal
function Main {
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host "  DIAGNÓSTICO ENTRA ID EXTERNAL - AKS" -ForegroundColor Cyan
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host ""
    
    # Verificar dependências
    Test-Dependencies
    
    # Obter informações dos tenants
    Get-TenantInfo
    
    # Login se tenant fornecido
    if ($TenantId) {
        if (-not (Try-DifferentLoginMethods $TenantId)) {
            Write-Error "Não foi possível realizar login com nenhum método"
            exit 1
        }
    } else {
        $inputTenant = Read-Host "`nDigite o Tenant ID para login (ou pressione Enter para usar o atual)"
        if ($inputTenant) {
            if (-not (Try-DifferentLoginMethods $inputTenant)) {
                Write-Error "Não foi possível realizar login com nenhum método"
                exit 1
            }
        } else {
            Write-Info "Usando tenant atual"
        }
    }
    
    Write-Host ""
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host "  VERIFICAÇÕES PÓS-LOGIN" -ForegroundColor Cyan
    Write-Host "=================================================" -ForegroundColor Cyan
    
    # Verificar grupos
    Test-EntraGroups
    
    # Verificar AKS se parâmetros fornecidos
    if ($ResourceGroup -and $ClusterName) {
        Test-AksAccess $ResourceGroup $ClusterName
    } else {
        Write-Host ""
        if (-not $ResourceGroup) {
            $ResourceGroup = Read-Host "Digite o Resource Group do AKS (opcional)"
        }
        if (-not $ClusterName) {
            $ClusterName = Read-Host "Digite o nome do Cluster AKS (opcional)"
        }
        
        if ($ResourceGroup -and $ClusterName) {
            Test-AksAccess $ResourceGroup $ClusterName
        }
    }
    
    Write-Host ""
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host "  DIAGNÓSTICO CONCLUÍDO" -ForegroundColor Cyan
    Write-Host "=================================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Success "Diagnóstico concluído! Verifique os resultados acima."
    Write-Host ""
    Write-Host "Se ainda houver problemas:" -ForegroundColor Yellow
    Write-Host "1. Verifique se você é membro do grupo Entra ID" -ForegroundColor White
    Write-Host "2. Confirme se está usando o tenant correto" -ForegroundColor White
    Write-Host "3. Verifique políticas de acesso condicional" -ForegroundColor White
    Write-Host "4. Consulte o arquivo 'entra-id-external-fix.md' para mais detalhes" -ForegroundColor White
}

# Executar função principal
Main
