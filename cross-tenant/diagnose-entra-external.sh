#!/bin/bash
# Generated by Copilot

# Script para diagnosticar e corrigir problemas de autenticação Entra ID External com AKS
# Arquivo: diagnose-entra-external.sh

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Função para log colorido
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Função para verificar se comando existe
check_command() {
    if ! command -v "$1" &> /dev/null; then
        error "Comando $1 não encontrado. Por favor, instale-o primeiro."
        exit 1
    fi
}

# Verificar dependências
log "Verificando dependências..."
check_command "az"
check_command "kubectl"
check_command "jq"

# Função para obter informações do tenant
get_tenant_info() {
    log "Obtendo informações dos tenants disponíveis..."
    
    echo ""
    echo "=== TENANTS DISPONÍVEIS ==="
    az account tenant list --output table
    
    echo ""
    echo "=== TENANT ATUAL ==="
    local current_tenant=$(az account show --query "tenantId" -o tsv 2>/dev/null || echo "Não logado")
    echo "Tenant ID: $current_tenant"
    
    if [[ "$current_tenant" != "Não logado" ]]; then
        local tenant_name=$(az account show --query "user.name" -o tsv 2>/dev/null || echo "Unknown")
        echo "Usuário: $tenant_name"
    fi
}

# Função para tentar login com tenant específico
try_login_with_tenant() {
    local tenant_id="$1"
    
    log "Tentando login com tenant: $tenant_id"
    
    if az login --tenant "$tenant_id" --output none; then
        success "Login realizado com sucesso!"
        return 0
    else
        error "Falha no login com tenant $tenant_id"
        return 1
    fi
}

# Função para verificar grupos do Entra ID
check_entra_groups() {
    local group_id="93ae7ed7-8077-4ed4-9947-ca3e991a253f"
    
    log "Verificando grupo Entra ID: $group_id"
    
    if az ad group show --group "$group_id" --output none 2>/dev/null; then
        success "Grupo encontrado!"
        
        echo ""
        echo "=== INFORMAÇÕES DO GRUPO ==="
        az ad group show --group "$group_id" --query "{displayName:displayName, description:description, id:id}" --output table
        
        echo ""
        echo "=== MEMBROS DO GRUPO ==="
        az ad group member list --group "$group_id" --query "[].{displayName:displayName, userPrincipalName:userPrincipalName, id:id}" --output table
        
    else
        error "Grupo não encontrado no tenant atual!"
        warn "Verifique se você está logado no tenant correto."
    fi
}

# Função para verificar acesso ao AKS
check_aks_access() {
    local resource_group="${1:-}"
    local cluster_name="${2:-}"
    
    if [[ -z "$resource_group" || -z "$cluster_name" ]]; then
        warn "Resource Group ou Cluster Name não fornecidos. Pulando verificação do AKS."
        return
    fi
    
    log "Verificando acesso ao cluster AKS: $cluster_name"
    
    # Tentar obter credenciais
    if az aks get-credentials --resource-group "$resource_group" --name "$cluster_name" --overwrite-existing --output none; then
        success "Credenciais do AKS obtidas com sucesso!"
        
        # Testar acesso
        echo ""
        echo "=== TESTE DE ACESSO AO CLUSTER ==="
        if kubectl get nodes --output wide; then
            success "Acesso ao cluster AKS funcionando!"
        else
            error "Falha ao acessar o cluster AKS"
        fi
        
        echo ""
        echo "=== VERIFICAÇÃO DE PERMISSÕES RBAC ==="
        kubectl auth can-i get nodes && success "Permissão para listar nodes: OK" || warn "Permissão para listar nodes: NEGADA"
        kubectl auth can-i get pods && success "Permissão para listar pods: OK" || warn "Permissão para listar pods: NEGADA"
        
        echo ""
        echo "=== IDENTIFICAÇÃO DO USUÁRIO ==="
        kubectl auth whoami 2>/dev/null || warn "Não foi possível identificar o usuário atual"
        
    else
        error "Falha ao obter credenciais do AKS"
    fi
}

# Função para tentar diferentes métodos de login
try_different_login_methods() {
    local tenant_id="$1"
    
    log "Tentando diferentes métodos de login para tenant: $tenant_id"
    
    # Método 1: Login normal com tenant
    echo ""
    echo "=== MÉTODO 1: Login normal com tenant ==="
    if try_login_with_tenant "$tenant_id"; then
        return 0
    fi
    
    # Método 2: Login com device code
    echo ""
    echo "=== MÉTODO 2: Login com device code ==="
    warn "Tentando login com device code..."
    if az login --use-device-code --tenant "$tenant_id" --output none; then
        success "Login com device code realizado com sucesso!"
        return 0
    else
        error "Falha no login com device code"
    fi
    
    # Método 3: Login interativo
    echo ""
    echo "=== MÉTODO 3: Login interativo ==="
    warn "Tentando login interativo..."
    if az login --tenant "$tenant_id" --output none; then
        success "Login interativo realizado com sucesso!"
        return 0
    else
        error "Falha no login interativo"
    fi
    
    return 1
}

# Função principal
main() {
    echo "================================================="
    echo "  DIAGNÓSTICO ENTRA ID EXTERNAL - AKS"
    echo "================================================="
    echo ""
    
    # Obter informações dos tenants
    get_tenant_info
    
    echo ""
    read -p "Digite o Tenant ID para login (ou pressione Enter para usar o atual): " input_tenant
    
    if [[ -n "$input_tenant" ]]; then
        if ! try_different_login_methods "$input_tenant"; then
            error "Não foi possível realizar login com nenhum método"
            exit 1
        fi
    else
        log "Usando tenant atual"
    fi
    
    echo ""
    echo "================================================="
    echo "  VERIFICAÇÕES PÓS-LOGIN"
    echo "================================================="
    
    # Verificar grupos
    check_entra_groups
    
    echo ""
    read -p "Digite o Resource Group do AKS (opcional): " resource_group
    read -p "Digite o nome do Cluster AKS (opcional): " cluster_name
    
    if [[ -n "$resource_group" && -n "$cluster_name" ]]; then
        check_aks_access "$resource_group" "$cluster_name"
    fi
    
    echo ""
    echo "================================================="
    echo "  DIAGNÓSTICO CONCLUÍDO"
    echo "================================================="
    echo ""
    success "Diagnóstico concluído! Verifique os resultados acima."
    echo ""
    echo "Se ainda houver problemas:"
    echo "1. Verifique se você é membro do grupo Entra ID"
    echo "2. Confirme se está usando o tenant correto"
    echo "3. Verifique políticas de acesso condicional"
    echo "4. Consulte o arquivo 'entra-id-external-fix.md' para mais detalhes"
}

# Verificar se script está sendo executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
